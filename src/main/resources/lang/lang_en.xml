<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="addr">Address</string>
    <string name="tableOfContent">Table of Contents</string>
    <string name="general">General</string>
    <string name="revision">Revision</string>
    <string name="date">Date</string>
    <string name="number">No.</string>
    <string name="maxValue">maximum</string>
    <string name="settings">The following describes the available settings of the simulator.</string>
    <string name="attr_dialogTitle">Attributes</string>
    <string name="attr_openCircuit">Open Circuit</string>
    <string name="attr_openCircuitLabel">Included circuit:</string>
    <string name="attr_openCircuit_tt">Opens the circuit in a new window.</string>
    <string name="attr_help">Help</string>
    <string name="attr_help_tt">Shows a short description of this element.</string>
    <string name="attr_dialogHex">Hex</string>
    <string name="attr_dialogDecimal">Decimal</string>
    <string name="attr_dialogAscii">Ascii</string>
    <string name="attr_dialogHighz">HighZ</string>
    <string name="attr_dialogOctal">Octal</string>
    <string name="attr_dialogBinary">Binary</string>
    <string name="attr_primary">Basic</string>
    <string name="attr_secondary">Advanced</string>
    <string name="btn_discard">Discard Changes</string>
    <string name="btn_edit">Edit</string>
    <string name="btn_editFurther">Continue editing</string>
    <string name="btn_load">Load</string>
    <string name="btn_reload">Reload</string>
    <string name="btn_reload_tt">Reload last hex file</string>
    <string name="btn_save">Save</string>
    <string name="btn_create">Create</string>
    <string name="btn_create_tt">Create a circuit in a separate window</string>
    <string name="btn_editDetached">Edit detached</string>
    <string name="btn_editDetached_tt">Opens the dialog as a non modal dialog</string>
    <string name="btn_openInBrowser">Browser</string>
    <string name="btn_openInBrowser_tt">Opens help text in the browser. Allows to print the text.</string>
    <string name="btn_clearData">Clear</string>
    <string name="btn_clearData_tt">All values are set to zero!</string>
    <string name="btn_addTransitions">Transitions</string>
    <string name="btn_addTransitions_tt">All possible transitions are added as test cases. Is used to create test cases to test the simulator itself.</string>
    <string name="btn_newName">New Name</string>
    <string name="btn_saveAnyway">Save anyway</string>
    <string name="btn_overwrite">Overwrite</string>
    <string name="btn_apply">Apply</string>
    <string name="btn_editRom_tt">Edits the content of the selected ROM/EEPROM</string>
    <string name="btn_clearRom_tt">Removes the stored data for the selected ROM. The content which is stored in the ROM directly is used instead.</string>
    <string name="btn_saveTemplate">Template</string>
    <string name="btn_saveTemplate_tt">Creates an SVG template which can then be edited with Inkscape.</string>
    <string name="btn_loadSvg">Import</string>
    <string name="btn_loadSvg_tt">Import an SVG file. To create a suitable SVG file, it is easiest to first create
        a SVG template and then edit it.</string>
    <string name="msg_warning">Warning</string>
    <string name="cancel">Cancel</string>
    <string name="digital">Digital</string>
    <string name="expression">Expression</string>
    <string name="elem_Help_inputs">Inputs</string>
    <string name="elem_Help_outputs">Outputs</string>
    <string name="elem_Help_attributes">Attributes</string>


    <!-- logic -->

    <string name="elem_Basic_In">The {0}. input value for the logic operation.</string>
    <string name="elem_Basic_Out">Returns the result of the logic operation.</string>

    <string name="elem_And">And</string>
    <string name="elem_And_tt">Binary AND gate. Returns high only if all inputs are also set high.
        It is also possible to use buses with several bits as inputs and output. In this case, a bitwise AND is executed.
        This means that the lowest bits of all inputs are connected with AND and is output as the lowest bit at the output.
        The same happens with bit 1, bit 2 and so on.
    </string>
    <string name="elem_NAnd">NAnd</string>
    <string name="elem_NAnd_tt">A combination of AND and NOT.
        Returns 0 only if all inputs are set to 1. If one of the inputs is set to 0 the output is set to 1.
        It is also possible to use buses with several bits per input. In this case, the operation is applied to each
        bit of the inputs.
    </string>
    <string name="elem_Or">Or</string>
    <string name="elem_Or_tt">Binary OR gate. Returns a 1 if one of the inputs is set to 1.
        If all inputs are set to 0 the output is also set to 0.
        It is also possible to use buses with several bits as inputs and output. In this case, a bitwise OR is executed.
        This means that the lowest bits of all inputs are connected with OR and is output as the lowest bit at the output.
        The same happens with bit 1, bit 2 and so on.
    </string>
    <string name="elem_NOr">NOr</string>
    <string name="elem_NOr_tt">A combination of OR and NOT.
        Returns a 0 if one of the inputs is set to 1. If all inputs are set to 0 the output is also set to 1.
        It is also possible to use buses with several bits per input. In this case, the operation is applied to each
        bit of the inputs.
    </string>
    <string name="elem_XOr">XOr</string>
    <string name="elem_XOr_tt">If two inputs are used, the output is 0 if both input bits are equal.
        Otherwise the output in set to 1.
        If more than two inputs are used, it behaves like cascaded XOR gates ( A XOR B XOR C = (A XOR B) XOR C ).
        It is also possible to use buses with several bits per input. In this case, the operation is applied to each
        bit of the inputs.
    </string>
    <string name="elem_XNOr">XNOr</string>
    <string name="elem_XNOr_tt">A combination of XOR and NOT. The inputs are combined with the XOR operation.
        The result of this operation than is inverted.
        It is also possible to use buses with several bits per input. In this case, the operation is applied to each
        bit of the inputs.
    </string>
    <string name="elem_Not">Not</string>
    <string name="elem_Not_tt">Inverts the input value. A 1 becomes a 0 and a 0 becomes 1.
        It is also possible to use a bus with several bits per input. In this case, the operation is applied to each
        bit of the inputs.
    </string>
    <string name="elem_Not_pin_in">The input of the NOT gate.</string>
    <string name="elem_Not_pin_out">The inverted input value.</string>
    <string name="elem_LookUpTable">LookUpTable</string>
    <string name="elem_LookUpTable_short">LUT</string>
    <string name="elem_LookUpTable_tt">Gets the output value from a stored table.
        So this gate can emulate every combinatorial gate.
    </string>
    <string name="elem_LookUpTable_pin_in">Input {0}. This input in combination with all other inputs defines the
        address of the stored value to be returned.</string>
    <string name="elem_LookUpTable_pin_out">Returns the stored value at the address set via the inputs.</string>
    <string name="elem_Delay">Delay</string>
    <string name="elem_Delay_tt">Delays the signal by on propagation delay time.
        Delays a signal for an adjustable number of gate delays.
        All other components in Digital have a gate delay of on propagation delay time.
        This component can be used to realize any necessary propagation delay.
    </string>
    <string name="elem_Delay_pin_in">Input of the signal to be delayed.</string>
    <string name="elem_Delay_pin_out">The input signal delayed by one gate delay time.</string>


    <!-- IO -->

    <string name="elem_Out">Out</string>
    <string name="elem_Out_tt">Can be used to display an output signal in a circuit.
        This element is also used to connect a circuit to an embedding circuit.
        In this case the connection is bidirectional.
        Is also used to assign an pin number, if code for a CPLD or FPGA is generated.
    </string>
    <string name="elem_Out_pin_in">This value is used for the output connection.</string>
    <string name="elem_LED">LED</string>
    <string name="elem_LED_tt">A LED can be used to visualize an output value. Accepts a single bit.
        Lights up if the input is set to 1.</string>
    <string name="elem_LED_pin_in">LED Input. LED lights up if the input is set to 1.</string>

    <string name="elem_RGBLED">RGB-LED</string>
    <string name="elem_RGBLED_tt">An RGB LED whose color can be controlled via three inputs.
        At each of the three inputs, a color channel is connected.</string>
    <string name="elem_RGBLED_pin_R">The red color channel.</string>
    <string name="elem_RGBLED_pin_G">The green color channel.</string>
    <string name="elem_RGBLED_pin_B">The blue color channel.</string>

    <string name="elem_PolarityAwareLED">LED with two connections.</string>
    <string name="elem_PolarityAwareLED_tt">LED with connections for the cathode and the anode. The LED lights up,
        if the anode is connected to high and the cathode is connected to low.</string>
    <string name="elem_PolarityAwareLED_pin_A">The anode connection of the LED.</string>
    <string name="elem_PolarityAwareLED_pin_C">The cathode connection of the LED.</string>

    <string name="elem_In">Input</string>
    <string name="elem_In_tt">Can be used to interactively manipulate an input signal in a circuit with the
        mouse. This element is also used to connect a circuit to an embedding circuit.
        In this case the connection is bidirectional.
        Is also used to assign an pin number, if code for a CPLD or FPGA is generated.
    </string>
    <string name="elem_In_pin_out">Gives the value which is connected to this input.</string>

    <string name="elem_DipSwitch">DIP Switch</string>
    <string name="elem_DipSwitch_tt">Simple DIP switch that can output either high or low.</string>
    <string name="elem_DipSwitch_pin_out">The output value of the switch.</string>

    <string name="elem_Clock">Clock Input</string>
    <string name="elem_Clock_tt">A clock signal. Its possible to control it by a real-time clock.
        Depending on the complexity of the circuit, the clock frequency achieved may be less than the selected value.
        If the frequency is greater than 50Hz, the graphic representation of the circuit will no longer be updated at
        every clock cycle so that the wire colors will no longer be updated.
        If the real-time clock is not activated, the clock can be controlled by mouse clicks.
        Is also used to assign an pin number, if code for a CPLD or FPGA is generated.
    </string>
    <string name="elem_Clock_pin_C">Switches between 0 and 1 with the selected clock frequency.</string>
    <string name="elem_Button">Button</string>
    <string name="elem_Button_tt">A simple push button which goes back to its original state when it is released.</string>
    <string name="elem_Button_pin_out">The output signal of the button.</string>
    <string name="elem_Text">Text</string>
    <string name="elem_Text_tt">Shows a text in the circuit.
        Does not affect the simulation.
        The text can be changed in the attribute dialog.
    </string>
    <string name="elem_Probe">Probe</string>
    <string name="elem_Probe_tt">A measurement value which can be shown in the data graph or measurement table.
        This component can be used to easily observe values from embedded circuits.
        Does not affect the simulation.
    </string>
    <string name="elem_Probe_pin_in">The measurement value.</string>


    <!-- IO - more -->

    <string name="elem_LightBulb">Light Bulb</string>
    <string name="elem_LightBulb_tt">Light bulb with two connections. If a current flows, the bulb lights up!
        The direction of the current does not matter. The lamp lights when the inputs have different values.
        The bulb behaves similar to an XOr gate.
    </string>
    <string name="elem_LightBulb_pin_A">Connection</string>
    <string name="elem_LightBulb_pin_B">Connection</string>
    <string name="elem_Seven-Seg">Seven-Segment Display</string>
    <string name="elem_Seven-Seg_tt">Seven Segment Display, every segment has its own control input.</string>
    <string name="elem_Seven-Seg_pin_a">This input controls the upper, horizontal line.</string>
    <string name="elem_Seven-Seg_pin_b">This input controls the upper, right, vertical line.</string>
    <string name="elem_Seven-Seg_pin_c">This input controls the lower, right, vertical line.</string>
    <string name="elem_Seven-Seg_pin_d">This input controls the lower horizontal line.</string>
    <string name="elem_Seven-Seg_pin_e">This input controls the lower, left, vertical line.</string>
    <string name="elem_Seven-Seg_pin_f">This input controls the upper, left, vertical line.</string>
    <string name="elem_Seven-Seg_pin_g">This input controls the middle, horizontal line.</string>
    <string name="elem_Seven-Seg_pin_dp">This input controls the decimal point.</string>
    <string name="elem_Seven-Seg_pin_cc">Common Cathode. To turn on the LEDs, this input needs to be low.</string>
    <string name="elem_Seven-Seg-Hex">Seven-Segment-Hex Display</string>
    <string name="elem_Seven-Seg-Hex_tt">Seven Segment Display with a 4 bit hex input</string>
    <string name="elem_Seven-Seg-Hex_pin_d">The value at this input is visualized at the display.</string>
    <string name="elem_Seven-Seg-Hex_pin_dp">This input controls the decimal point.</string>

    <string name="elem_SixteenSeg">16-Segement Display</string>
    <string name="elem_SixteenSeg_tt">The LED input has 16 bits which control the segments. The second input controls the decimal point.</string>
    <string name="elem_SixteenSeg_pin_led">16-bit bus for driving the LEDs.</string>
    <string name="elem_SixteenSeg_pin_dp">This input controls the decimal point.</string>

    <string name="elem_LedMatrix">LED-Matrix</string>
    <string name="elem_LedMatrix_tt">A matrix of LEDs. The LEDs are shown in a separate window.
        The LEDs of a column of the display are controlled by a data word. At another input, the current column is
        selected. So a multiplexed display is realized.
        The LEDs are able to light up indefinitely in the simulation to prevent the display from flickering.
    </string>
    <string name="elem_LedMatrix_pin_r-data">The row state of the LEDs of a column.
        Each bit in this data word represents the state of a row of the current column.</string>
    <string name="elem_LedMatrix_pin_c-addr">The number of the current column whose state is currently visible at the other input.</string>
    <string name="elem_Data">Data Graph</string>
    <string name="elem_Data_tt">Shows a data plot inside of the circuit panel.
        You can plot complete clock cycles or single gate changes.
        Does not affect the simulation.
    </string>
    <string name="elem_RotEncoder">Rotary Encoder</string>
    <string name="elem_RotEncoder_tt">Rotary knob with rotary encoder. Used to detect rotational movements.</string>
    <string name="elem_RotEncoder_pin_A">encoder signal A</string>
    <string name="elem_RotEncoder_pin_B">encoder signal B</string>

    <string name="elem_Keyboard">Keyboard</string>
    <string name="elem_Keyboard_tt">A keyboard that can be used to enter text.
        This component buffers the input, which can then be read out.
        A separate window is opened for the text input.
    </string>
    <string name="elem_Keyboard_pin_C">Clock. A rising edge removes the oldest character from the buffer.</string>
    <string name="elem_Keyboard_pin_en">If high the output D is active and one character is output.
        It also enables the clock input.</string>
    <string name="elem_Keyboard_pin_D">The last typed character, or zero if no character is available.</string>
    <string name="elem_Keyboard_pin_av">This output indicates that characters are available.
        It can be used to trigger an interrupt.</string>

    <string name="elem_Terminal">Terminal</string>
    <string name="elem_Terminal_tt">You can write ASCII characters to this terminal.
        The terminal opens its own window to visualize the output.</string>
    <string name="elem_Terminal_pin_C">Clock. A rising edge writes the value at the input to the terminal window.</string>
    <string name="elem_Terminal_pin_D">The data to write to the terminal</string>
    <string name="elem_Terminal_pin_en">A high at this input enables the clock input.</string>


    <!-- Wires -->

    <string name="elem_Ground">Ground</string>
    <string name="elem_Ground_tt">A connection to ground. Output is always zero.</string>
    <string name="elem_Ground_pin_out">Output always returns 0.</string>
    <string name="elem_VDD">Supply voltage</string>
    <string name="elem_VDD_tt">A connection to the supply voltage. Output is always one.</string>
    <string name="elem_VDD_pin_out">This output always returns 1.</string>
    <string name="elem_Const">Constant value</string>
    <string name="elem_Const_tt">A component which returns a given value as a simple constant value. The value can be set in the attribute dialog.</string>
    <string name="elem_Const_pin_out">Returns the given value as a constant.</string>
    <string name="elem_Tunnel">Tunnel</string>
    <string name="elem_Tunnel_tt">Connects components without a wire. All tunnel elements, which have the same net name,
        are connected together. Works only locally, so it is not possible to connect different circuits.</string>
    <string name="elem_Tunnel_pin_in">The connection to the tunnel.</string>
    <string name="elem_Splitter">Splitter</string>
    <string name="elem_Splitter_tt">Splits or creates a wire bundle or a data bus with more than one bit.
        With a bus it is e.g. possible to generate 16-bit connections without having to route 16 individual wires.
        All 16 connections can be merged into one wire.
    </string>
    <string name="elem_Splitter_pin_in">The input bits {0}.</string>
    <string name="elem_Splitter_pin_in_one">The input bit {0}.</string>
    <string name="elem_Splitter_pin_out">The output bits {0}.</string>
    <string name="elem_Splitter_pin_out_one">The output bit {0}.</string>

    <string name="elem_BusSplitter">Bidirectional Splitter</string>
    <string name="elem_BusSplitter_tt">Can be used for data buses and simplifies especially the construction of
        memory modules in a DIL package, as the implementation of the data bus is simplified.</string>
    <string name="elem_BusSplitter_pin_OE">When set, the value at the common data terminal D is output to the bit
        outputs D[i], if not, the bits D[i] are output to the common output D.</string>
    <string name="elem_BusSplitter_pin_D">The common data connection.</string>
    <string name="elem_BusSplitter_pin_D_N">The data bit {0} of the bus splitter.</string>

    <string name="elem_PullUp">Pull-Up Resistor</string>
    <string name="elem_PullUp_tt">If a net is in a HighZ state, this resistor pulls the net to high.
        In any other case this component has no effect.
    </string>
    <string name="elem_PullUp_pin_out">A "weak high".</string>
    <string name="elem_PullDown">Pull-Down Resistor</string>
    <string name="elem_PullDown_tt">If the net is in a HighZ state, this resistor pulls the net to ground.
        In any other case this component has no effect.
    </string>
    <string name="elem_PullDown_pin_out">A "weak low".</string>
    <string name="elem_Driver">Driver</string>
    <string name="elem_Driver_tt">A driver can be used to connect a signal value to another wire.
        The driver is controlled by the sel input.
        If the sel input is low, the output is in high z state.
        If the sel input is high, the output is set to the input value.
    </string>
    <string name="elem_Driver_pin_in">The input value of the driver.</string>
    <string name="elem_Driver_pin_sel">Pin to control the driver.
        If its value is 1 the input is set to the output.
        If the value is 0, the output is in high z state.
    </string>
    <string name="elem_Driver_pin_out">If the sel input is 1 the input is given to this output.
        If the sel input is 0, this output is in high z state.
    </string>
    <string name="elem_DriverInvSel">Driver, inverted select</string>
    <string name="elem_DriverInvSel_tt">A driver can be used to connect a data word to another line.
        The driver is controlled by the sel input.
        If the sel input is high, the output is in high z state.
        If the sel input is low, the output is set to the input value.
    </string>
    <string name="elem_DriverInvSel_pin_in">The input value of the driver.</string>
    <string name="elem_DriverInvSel_pin_sel">Pin to control the driver.
        If its value is 0 the input is given to the output.
        If the value is 1, the output is in high z state.
    </string>
    <string name="elem_DriverInvSel_pin_out">If the sel input is 0 the input is given to this output.
        If the sel input is 1, this output is in high z state.
    </string>


    <!-- Plexers  -->

    <string name="elem_Multiplexer">Multiplexer</string>
    <string name="elem_Multiplexer_tt">A component which uses the value of the sel pin to decide which input value is set to the output.</string>
    <string name="elem_Multiplexer_input">The {0}. data input of the multiplexer.</string>
    <string name="elem_Multiplexer_output">The value of the selected input.</string>
    <string name="elem_Multiplexer_pin_sel">This input is used to select the data input which is output.</string>
    <string name="elem_Demultiplexer">Demultiplexer</string>
    <string name="elem_Demultiplexer_tt">A component that can output the input value to one of the outputs.
        The other outputs are set to the default value.</string>
    <string name="elem_Demultiplexer_pin_sel">This pin selects the output to use.</string>
    <string name="elem_Demultiplexer_pin_in">The value of this input is given to the selected data output.</string>
    <string name="elem_Demultiplexer_output">Data output {0}.</string>
    <string name="elem_Decoder">Decoder</string>
    <string name="elem_Decoder_tt">One selectable output pin is 1, all other outputs are set to 0.</string>
    <string name="elem_Decoder_output">Output {0}. This output is 1 if selected by the sel input.</string>
    <string name="elem_Decoder_pin_sel">This input selects the enabled output.
        The selected output is set to 1. All other outputs are set to 0.</string>
    <string name="elem_BitSelector">Bit Selector</string>
    <string name="elem_BitSelector_tt">Selects a single bit from a data bus.</string>
    <string name="elem_BitSelector_pin_in">The input bus</string>
    <string name="elem_BitSelector_pin_sel">This input selects the bit</string>
    <string name="elem_BitSelector_pin_out">The selected bit.</string>

    <string name="elem_PriorityEncoder">Priority Encoder</string>
    <string name="elem_PriorityEncoder_short">Priority</string>
    <string name="elem_PriorityEncoder_tt">If one of the inputs is set, its number is output.
        If several inputs are set at the same time, the highest number is output.</string>
    <string name="elem_PriorityEncoder_pin_num">Number of the set input.</string>
    <string name="elem_PriorityEncoder_pin_any">If this output is set, at least one of the inputs is set.</string>
    <string name="elem_PriorityEncoder_input">The {0}. input of the priority encoder.</string>

    <!-- flip flops-->

    <string name="elem_RS_FF_AS">RS-Flip-flop</string>
    <string name="elem_RS_FF_AS_short">RS</string>
    <string name="elem_RS_FF_AS_tt">A component to store a single bit.
        Provides the functions "set" and "reset" to set or reset the stored bit.
        If both inputs are switched to one, both outputs also output a one.
        If both inputs switch back to zero at the same time, the final state is random.
    </string>
    <string name="elem_RS_FF_AS_pin_S">The set input.</string>
    <string name="elem_RS_FF_AS_pin_R">The reset input.</string>
    <string name="elem_RS_FF_AS_pin_Q">Returns the stored value.</string>
    <string name="elem_RS_FF_AS_pin_~Q">Returns the inverted stored value.</string>

    <string name="elem_RS_FF">RS-Flip-flop, clocked</string>
    <string name="elem_RS_FF_short">RS</string>
    <string name="elem_RS_FF_tt">A component to store a single bit.
        Provides the functions "set" and "reset" to set or reset the stored bit.
        If both inputs (S, R) are set at the rising edge of the clock, the final state is random.
    </string>
    <string name="elem_RS_FF_pin_S">The set input.</string>
    <string name="elem_RS_FF_pin_C">The clock input. A rising edge initiates a state transition.</string>
    <string name="elem_RS_FF_pin_R">The reset input.</string>
    <string name="elem_RS_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_RS_FF_pin_~Q">Returns the inverted stored value.</string>
    <string name="elem_JK_FF">JK-Flip-flop</string>
    <string name="elem_JK_FF_short">JK</string>
    <string name="elem_JK_FF_tt">Has the possibility to store (J=K=0), set (J=1, K=0), reset (J=0, K=1) or toggle (J=K=1) the stored value.
        A change of state takes place only at a rising edge at the clock input C.</string>
    <string name="elem_JK_FF_pin_J">The set input of the flip-flop.</string>
    <string name="elem_JK_FF_pin_C">The clock input. A rising edge initiates a state change.</string>
    <string name="elem_JK_FF_pin_K">The reset input of the flip-flop.</string>
    <string name="elem_JK_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_JK_FF_pin_~Q">Returns the inverted stored value.</string>
    <string name="elem_D_FF">D-Flip-flop</string>
    <string name="elem_D_FF_short">D</string>
    <string name="elem_D_FF_tt">A component used to store a value.
        The value on pin D is stored on a rising edge of the clock pin C.
        The bit width can be selected, which allows to store multiple bits.
    </string>
    <string name="elem_D_FF_pin_D">Input of the bit to be stored.</string>
    <string name="elem_D_FF_pin_C">Clock pin to store a value.
        The value on input D is stored on a rising edge of this pin.</string>
    <string name="elem_D_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_D_FF_pin_~Q">Returns the inverted stored value.</string>
    <string name="elem_T_FF">T-Flip-Flop</string>
    <string name="elem_T_FF_short">T</string>
    <string name="elem_T_FF_tt">Stores a single bit. Toggles the state on a rising edge at input C.</string>
    <string name="elem_T_FF_pin_T">Enables the toggle function.</string>
    <string name="elem_T_FF_pin_C">Clock input. A rising edge toggles the output, if input T is set to 1.</string>
    <string name="elem_T_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_T_FF_pin_~Q">Returns the inverted stored value.</string>
    <string name="elem_JK_FF_AS">JK-Flip-flop, asynchronous</string>
    <string name="elem_JK_FF_AS_short">JK-AS</string>
    <string name="elem_JK_FF_AS_tt">Has the possibility to store (J=K=0), set (J=1, K=0), reset (J=0, K=1) or toggle (J=K=1) the stored value.
        A change of state takes place only at a rising edge at the clock input C.
        There are two additional inputs which set or reset the state immediately without a clock signal.
    </string>
    <string name="elem_JK_FF_AS_pin_J">The set input of the flip-flop.</string>
    <string name="elem_JK_FF_AS_pin_C">The Clock input. A rising edge initiates a state change.</string>
    <string name="elem_JK_FF_AS_pin_K">The reset input of the flip-flop.</string>
    <string name="elem_JK_FF_AS_pin_Q">Returns the stored value.</string>
    <string name="elem_JK_FF_AS_pin_~Q">Returns the inverted stored value.</string>
    <string name="elem_JK_FF_AS_pin_Set">asynchronous set. A high value at this input sets the flip-flop.</string>
    <string name="elem_JK_FF_AS_pin_Clr">asynchronous clear. A high value at this input clears the flip-flop.</string>
    <string name="elem_D_FF_AS">D-Flip-flop, asynchronous</string>
    <string name="elem_D_FF_AS_short">D-AS</string>
    <string name="elem_D_FF_AS_tt">A component used to store a value.
        The value on pin D is stored on a rising edge of the clock pin C.
        There are two additional inputs which set or reset the state immediately without a clock signal.
        The bit width can be selected, which allows to store multiple bits.
    </string>
    <string name="elem_D_FF_AS_pin_D">Input of the bit to be stored.</string>
    <string name="elem_D_FF_AS_pin_C">Control pin to store a bit. The bit on input D is stored on a rising edge of this pin.</string>
    <string name="elem_D_FF_AS_pin_Q">Returns the stored value.</string>
    <string name="elem_D_FF_AS_pin_~Q">Returns the inverted stored value.</string>
    <string name="elem_D_FF_AS_pin_Set">asynchronous set. If set to one, all stored bits are set to one.</string>
    <string name="elem_D_FF_AS_pin_Clr">asynchronous clear. If set to one, all stored bits are set to zero.</string>

    <string name="elem_Monoflop">Monoflop</string>
    <string name="elem_Monoflop_short">Mono</string>
    <string name="elem_Monoflop_tt">The monoflop is set at a rising edge at the clock input.
        After a configurable delay time, the monoflop will be cleared automatically.
        The monoflop is retriggerable. It can only be used if there is exactly one clock component present in the circuit.
        This clock component is used as time base to measure the time delay.
    </string>
    <string name="elem_Monoflop_pin_R">Reset Input. A high value clears the monoflop.</string>
    <string name="elem_Monoflop_pin_C">The Clock input. A rising edge sets the monoflop.</string>
    <string name="elem_Monoflop_pin_Q">output</string>
    <string name="elem_Monoflop_pin_~Q">inverted output</string>

    <!-- Memory -->

    <string name="elem_Register">Register</string>
    <string name="elem_Register_short">Reg</string>
    <string name="elem_Register_tt">A component to store values. The bit width of the data word can be selected.
        Unlike a D flip-flop, the register provides an input which enables the clock.</string>
    <string name="elem_Register_pin_D">Input pin of the data word to be stored.</string>
    <string name="elem_Register_pin_C">Clock input. A rising edge stores the value at the D pin.</string>
    <string name="elem_Register_pin_en">Enable pin. Storing a value works only if this pin is set high.</string>
    <string name="elem_Register_pin_Q">Returns the stored value.</string>
    <string name="elem_ROM">ROM</string>
    <string name="elem_ROM_tt">A non-volatile memory component.
        The stored data can be edited in the attributes dialog.
    </string>
    <string name="elem_ROM_pin_A">This pin defines the address of data word to be output.</string>
    <string name="elem_ROM_pin_D">The selected data word if the sel input is high.</string>
    <string name="elem_ROM_pin_sel">If the input is high, the output is activated. If it is low, the data output is in high Z state.</string>

    <string name="elem_RAMDualPort">RAM, separated Ports</string>
    <string name="elem_RAMDualPort_short">RAM</string>
    <string name="elem_RAMDualPort_tt">A RAM module with separate inputs for storing and output for reading the stored data.</string>
    <string name="elem_RAMDualPort_pin_A">The address to read from or write to.</string>
    <string name="elem_RAMDualPort_pin_C">Clock input</string>
    <string name="elem_RAMDualPort_pin_Din">The data to be stored in the RAM.</string>
    <string name="elem_RAMDualPort_pin_D">The data output pin</string>
    <string name="elem_RAMDualPort_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_RAMDualPort_pin_str">If this input is high and when the clock becomes high, the the data is stored.</string>

    <string name="elem_EEPROMDualPort">EEPROM, separated Ports</string>
    <string name="elem_EEPROMDualPort_short">EEPROM</string>
    <string name="elem_EEPROMDualPort_tt">A EEPROM module with separate inputs for storing and output for reading the stored data.</string>
    <string name="elem_EEPROMDualPort_pin_A">The address to read from or write to.</string>
    <string name="elem_EEPROMDualPort_pin_C">Clock input</string>
    <string name="elem_EEPROMDualPort_pin_Din">The data to be stored in the RAM.</string>
    <string name="elem_EEPROMDualPort_pin_D">The data output pin</string>
    <string name="elem_EEPROMDualPort_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_EEPROMDualPort_pin_str">If this input is high and when the clock becomes high, the the data is stored.</string>

    <string name="elem_RAMSinglePort">RAM, bidirectional Port</string>
    <string name="elem_RAMSinglePort_short">RAM</string>
    <string name="elem_RAMSinglePort_tt">A RAM module with a bidirectional pin for reading and writing the data.</string>
    <string name="elem_RAMSinglePort_pin_A">The address to read and write.</string>
    <string name="elem_RAMSinglePort_pin_C">Clock</string>
    <string name="elem_RAMSinglePort_pin_D">The bidirectional data connection.</string>
    <string name="elem_RAMSinglePort_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_RAMSinglePort_pin_str">If this input is high when the clock becomes high, the the data is stored.</string>
    <string name="elem_RAMSinglePortSel">RAM, Chip Select</string>
    <string name="elem_RAMSinglePortSel_short">RAM</string>
    <string name="elem_RAMSinglePortSel_tt">A RAM module with a bidirectional connection for reading and writing the data.
        If the CS input is low, the component is disabled.
        This allows to build a larger RAM from some smaller RAMs and a address decoder.</string>
    <string name="elem_RAMSinglePortSel_pin_A">The address to read and write.</string>
    <string name="elem_RAMSinglePortSel_pin_WE">If set to high the data is written to the RAM.</string>
    <string name="elem_RAMSinglePortSel_pin_D">The bidirectional data connection.</string>
    <string name="elem_RAMSinglePortSel_pin_CS">If this input is high, this RAM is enabled. Otherwise the output is always in high Z state.</string>
    <string name="elem_RAMSinglePortSel_pin_OE">If this input is high, the stored value is output.</string>
    <string name="elem_EEPROM">EEPROM</string>
    <string name="elem_EEPROM_tt">A EEPROM module with a bidirectional connection for reading and writing the data.
        If the CS input is low, the component is disabled.
        The data content is stored like in a ROM. It is thus preserved when the simulation is terminated and restarted.</string>
    <string name="elem_EEPROM_pin_A">The address to read and write.</string>
    <string name="elem_EEPROM_pin_WE">If set to high the data is written to the EEPROM.</string>
    <string name="elem_EEPROM_pin_D">The bidirectional data connection.</string>
    <string name="elem_EEPROM_pin_CS">If this input is high, this EEPROM is enabled. Otherwise the output is always in high Z state.</string>
    <string name="elem_EEPROM_pin_OE">If this input is high, the stored value is output.</string>
    <string name="elem_GraphicCard">Graphic RAM</string>
    <string name="elem_GraphicCard_short">Gr-RAM</string>
    <string name="elem_GraphicCard_tt">Used to show a bitmap graphic. This element behaves like a RAM. In addition it
        shows its content on a graphic screen. Every pixel is represented by a memory address. The value stored defines
        the color of the pixel, using a fixed color palette. There are two screen buffers implemented to support page
        flipping. The input B selects which buffer is shown. Thus, the total memory size is dx * dy * 2 words.
    </string>
    <string name="elem_GraphicCard_pin_A">The address to read and write.</string>
    <string name="elem_GraphicCard_pin_str">If this input is high when the clock becomes high, the the data is stored.</string>
    <string name="elem_GraphicCard_pin_C">Clock</string>
    <string name="elem_GraphicCard_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_GraphicCard_pin_B">Selects the screen buffer to show.</string>
    <string name="elem_GraphicCard_pin_D">The bidirectional data connection.</string>

    <string name="elem_RAMDualAccess">RAM, Dual Port</string>
    <string name="elem_RAMDualAccess_short">RAM</string>
    <string name="elem_RAMDualAccess_tt">RAM with one port that allows to write to and read from the RAM, and a second
        read only port.
        This second port can be used to give some graphic logic access to the memory contents. In this way, a processor
        can write to the RAM, and a graphics logic can simultaneously read from the RAM.</string>
    <string name="elem_RAMDualAccess_pin_1D">Output Port 1</string>
    <string name="elem_RAMDualAccess_pin_2D">Output Port 2</string>
    <string name="elem_RAMDualAccess_pin_1A">The address at which port 1 is read or written.</string>
    <string name="elem_RAMDualAccess_pin_2A">The address used to read via port 2.</string>
    <string name="elem_RAMDualAccess_pin_C">Clock</string>
    <string name="elem_RAMDualAccess_pin_1Din">The data to be stored in the RAM.</string>
    <string name="elem_RAMDualAccess_pin_ld">If this input is high the output is activated and the data is visible at the output 1D.</string>
    <string name="elem_RAMDualAccess_pin_str">If this input is high and when the clock becomes high, the the data is stored.</string>

    <string name="elem_RegisterFile">Register File</string>
    <string name="elem_RegisterFile_short">Register</string>
    <string name="elem_RegisterFile_tt">Memory with one port that allows to write and two ports that allow to read from
        the memory simultaneously. Can be used to implement processor registers.
        Two registers can be read simultaneously and a third can be written.</string>
    <string name="elem_RegisterFile_pin_Da">Output Port a</string>
    <string name="elem_RegisterFile_pin_Db">Output Port b</string>
    <string name="elem_RegisterFile_pin_Ra">The register which is visible at port a.</string>
    <string name="elem_RegisterFile_pin_Rb">The register which is visible at port b.</string>
    <string name="elem_RegisterFile_pin_Rw">The register into which the data is written.</string>
    <string name="elem_RegisterFile_pin_we">If this input is high and when the clock becomes high, the the data is stored.</string>
    <string name="elem_RegisterFile_pin_C">Clock</string>
    <string name="elem_RegisterFile_pin_Din">The data to be stored in the register Rw.</string>

    <string name="elem_Counter">Counter</string>
    <string name="elem_Counter_short">Counter</string>
    <string name="elem_Counter_tt">A simple counter component. The clock input increases the counter.
        Can be reset back to 0 with the clr input.
        The number of bits can be set in the attribute dialog.</string>
    <string name="elem_Counter_pin_C">The clock input. A rising edge increases the counter.</string>
    <string name="elem_Counter_pin_clr">Synchronous reset of the counter if set to 1.</string>
    <string name="elem_Counter_pin_out">Returns the counted value.</string>
    <string name="elem_Counter_pin_ovf">Overflow output. This pin is set to 1 if the counter is on its maximal value
        and the en input is set to 1.</string>
    <string name="elem_Counter_pin_en">If set to 1 the counter is enabled!</string>

    <string name="elem_CounterPreset">Counter with preset</string>
    <string name="elem_CounterPreset_tt">A counter whose value can be set. In addition, a maximum value and a counting direction can be specified.</string>
    <string name="elem_CounterPreset_short">Counter</string>
    <string name="elem_CounterPreset_pin_out">Returns the counted value.</string>
    <string name="elem_CounterPreset_pin_ovf">Overflow output. It is set to 1 if the 'en' input is set to 1 and if the
    counter reaches its maximum value when counting up, or has reached 0 when counting down.</string>
    <string name="elem_CounterPreset_pin_C">The clock input. A rising edge increases the counter.</string>
    <string name="elem_CounterPreset_pin_clr">Synchronous reset of the counter if set to 1.</string>
    <string name="elem_CounterPreset_pin_en">If set to 1 the counter is enabled!</string>
    <string name="elem_CounterPreset_pin_dir">Specifies the counting direction. A 0 means upwards.</string>
    <string name="elem_CounterPreset_pin_ld">If set, the value at input 'in' is stored in the counter at the next clock signal.</string>
    <string name="elem_CounterPreset_pin_in">This data word is stored in the counter when ld  is set.</string>


    <!--Arithmetic -->

    <string name="elem_Add">Adder</string>
    <string name="elem_Add_short">Add</string>
    <string name="elem_Add_tt">A component for simple add calculations.
        Adds the two integer values from input a and input b (a+b).
        The result will be incremented by one if the carry input is set.</string>
    <string name="elem_Add_pin_a">First input to add.</string>
    <string name="elem_Add_pin_b">Second input to add.</string>
    <string name="elem_Add_pin_c_i">Carry input, if set the result is incremented by one.</string>
    <string name="elem_Add_pin_s">The result of the addition</string>
    <string name="elem_Add_pin_c_o">Carry output. If set there was an overflow.</string>
    <string name="elem_Sub">Subtract</string>
    <string name="elem_Sub_short">Sub</string>
    <string name="elem_Sub_tt">A component for simple subtractions.
        Subtracts binary numbers on input a and input b (a-b).
        If the carry input is set to 1 the result is decremented by 1.</string>
    <string name="elem_Sub_pin_c_i">Carry input, if set the result is decremented by one.</string>
    <string name="elem_Sub_pin_a">Input a for subtraction.</string>
    <string name="elem_Sub_pin_b">Input b for subtraction.</string>
    <string name="elem_Sub_pin_s">Output returns the result of the subtraction.</string>
    <string name="elem_Sub_pin_c_o">Output returns 1 if an overflow occurred.</string>
    <string name="elem_Mul">Multiply</string>
    <string name="elem_Mul_short">Mul</string>
    <string name="elem_Mul_tt">A component for multiplication.
        Multiplies the integer numbers on input pin a and input pin b.
    </string>
    <string name="elem_Mul_pin_a">Input a for multiplication.</string>
    <string name="elem_Mul_pin_b">Input b for multiplication.</string>
    <string name="elem_Mul_pin_mul">Output for the result of the multiplication.</string>
    <string name="elem_Div">Division</string>
    <string name="elem_Div_short">Div</string>
    <string name="elem_Div_tt">A component for division.
        Divides the integer applied to input a by the integer applied to input b.
        If the divisor is zero, it is divided by one instead.
        In signed division, the remainder is always positive.
    </string>
    <string name="elem_Div_pin_a">dividend</string>
    <string name="elem_Div_pin_b">divisor</string>
    <string name="elem_Div_pin_q">quotient</string>
    <string name="elem_Div_pin_r">remainder</string>
    <string name="elem_BarrelShifter">Barrel shifter</string>
    <string name="elem_BarrelShifter_short">shift</string>
    <string name="elem_BarrelShifter_tt">A component for bit shifting.
        Shifts the input value by the number of bits given by the shift input.</string>
    <string name="elem_BarrelShifter_pin_in">Input with bits to be shifted.</string>
    <string name="elem_BarrelShifter_pin_shift">Input with shift width.</string>
    <string name="elem_BarrelShifter_pin_out">Output with shifted value.</string>
    <string name="elem_Comparator">Comparator</string>
    <string name="elem_Comparator_tt">A component for comparing bit values.
        Compares the binary numbers on input pin a and input pin b and sets the corresponding outputs.</string>
    <string name="elem_Comparator_pin_a">Input a to compare.</string>
    <string name="elem_Comparator_pin_b">Input b to compare.</string>
    <string name="elem_Comparator_pin_=">Output is 1 if input a equals input b</string>
    <string name="elem_Comparator_pin_&gt;">Output is 1 if input a is greater then input b</string>
    <string name="elem_Comparator_pin_&lt;">Output is 1 if input a is less then input b</string>
    <string name="elem_Neg">Negation</string>
    <string name="elem_Neg_short">Neg</string>
    <string name="elem_Neg_tt">Negation in the 2th complement</string>
    <string name="elem_Neg_pin_in">Input of the data word to be negated in 2th complement</string>
    <string name="elem_Neg_pin_out">Returns the result of the negation in 2th complement.</string>
    <string name="elem_BitExtender">Sign extender</string>
    <string name="elem_BitExtender_short">SignEx</string>
    <string name="elem_BitExtender_tt">Increases the bit width of a signed value keeping the values sign.
        If the input is a single bit, this bit will be output on all output bits.
    </string>
    <string name="elem_BitExtender_pin_in">Input value.
        The input bit width must be smaller than the output bit width!</string>
    <string name="elem_BitExtender_pin_out">Extended input value.
        The input bit width must be smaller than the output bit width!</string>
    <string name="elem_BitCount">Bit counter</string>
    <string name="elem_BitCount_short">Bit count</string>
    <string name="elem_BitCount_tt">Returns the number of 1-bits in the input value.</string>
    <string name="elem_BitCount_pin_in">The input which 1-bits are counted.</string>
    <string name="elem_BitCount_pin_out">Outputs the number of 1-bits.</string>


    <!-- Switches -->

    <string name="elem_DiodeForward">Diode to VDD</string>
    <string name="elem_DiodeForward_tt">A simplified unidirectional diode, used to pull a wire to VDD.
        It is used to implement a wired OR.
        So it is necessary to connect a pull down resistor to the diodes output.
        In the simulation the diode behaves like an active gate with a trivalent truth table:
        Is the input high, also the output is high. In all other cases (input is low or high z) the output is in high z state.
        So two anti parallel connected diodes can keep each other in high state, which is not possible with real diodes.
        This is an ideal diode: There is no voltage drop across a forward-biased diode.</string>
    <string name="elem_DiodeForward_pin_in">If the input is high also the output is high. In all other cases the output is in high z state.</string>
    <string name="elem_DiodeForward_pin_out">If the input is high also the output is high. In all other cases the output is in high z state.</string>
    <string name="elem_DiodeBackward">Diode to Ground</string>
    <string name="elem_DiodeBackward_tt">A simplified unidirectional diode, used to pull a wire to ground. It is used to implement a wired AND.
        So it is necessary to connect a pull up resistor to the diodes output.
        Is the input low, also the output is low. In the other cases (input is high or high z) the output is in high z state.
        So two anti parallel connected diodes can keep each other in low state, which is not possible with real diodes.
        So this is a ideal diode: There is no voltage drop across a forward-biased diode.</string>
    <string name="elem_DiodeBackward_pin_in">If the input is low also the output is low. In all other cases the output is in high z state.</string>
    <string name="elem_DiodeBackward_pin_out">If the input is low also the output is low. In all other cases the output is in high z state.</string>
    <string name="elem_Switch">Switch</string>
    <string name="elem_Switch_tt">Simple switch.
        There is no gate delay: A signal change is propagated immediately.</string>
    <string name="elem_Switch_pin">One of the connections of the switch.</string>

    <string name="elem_SwitchDT">Double Throw Switch</string>
    <string name="elem_SwitchDT_tt">Double Throw Switch.
        There is no gate delay: A signal change is propagated immediately.</string>

    <string name="elem_Fuse">Fuse</string>
    <string name="elem_Fuse_tt">A fuse used to build a one time programmable memory.</string>
    <string name="elem_Fuse_pin_out1">One of the connections of the fuse.</string>
    <string name="elem_Fuse_pin_out2">One of the connections of the fuse.</string>
    <string name="elem_Relay">Relay</string>
    <string name="elem_Relay_tt">A relay is a switch which can be controlled by a coil.
        If a current flows through the coil, the switch is closed or opened.
        There is no flyback diode so the current direction does not matter.
        The switch is actuated if the inputs have different values.
        The relay behaves similar to an XOr gate.</string>
    <string name="elem_Relay_pin_in1">On of the inputs to control the relay.</string>
    <string name="elem_Relay_pin_in2">On of the inputs to control the relay.</string>
    <string name="elem_RelayDT">Double Throw Relay</string>
    <string name="elem_RelayDT_tt">A relay is a switch which can be controlled by a coil.
        If a current flows through the coil, the switch is closed or opened.
        There is no flyback diode so the current direction does not matter.
        The switch is actuated if the inputs have different values.
        The relay behaves similar to an XOr gate.</string>
    <string name="elem_RelayDT_pin_in1">On of the inputs to control the relay.</string>
    <string name="elem_RelayDT_pin_in2">On of the inputs to control the relay.</string>
    <string name="elem_PFET">P-Channel FET</string>
    <string name="elem_PFET_tt">P-Channel Field Effect Transistor.
        The bulk is connected to the pos. voltage rail and the transistor is simulated without a body diode.</string>
    <string name="elem_PFET_pin_G">Gate</string>
    <string name="elem_PFET_pin_S">Source</string>
    <string name="elem_PFET_pin_D">Drain</string>
    <string name="elem_NFET">N-Channel FET</string>
    <string name="elem_NFET_tt">N-Channel Field Effect Transistor.
        The bulk is connected to ground and the transistor is simulated without a body diode.</string>
    <string name="elem_NFET_pin_G">Gate</string>
    <string name="elem_NFET_pin_S">Source</string>
    <string name="elem_NFET_pin_D">Drain</string>
    <string name="elem_FGPFET">P-Channel floating gate FET</string>
    <string name="elem_FGPFET_tt">P-Channel Floating Gate Field Effect Transistor.
        The bulk is connected to ground and the transistor is simulated without a body diode.
        If there is a charge stored in the floating gate, the fet isn't conducting even if the gate is low.
    </string>
    <string name="elem_FGPFET_pin_G">Gate</string>
    <string name="elem_FGPFET_pin_S">Source</string>
    <string name="elem_FGPFET_pin_D">Drain</string>
    <string name="elem_FGNFET">N-Channel floating gate FET</string>
    <string name="elem_FGNFET_tt">N-Channel Floating Gate Field Effect Transistor.
        The bulk is connected to ground and the transistor is simulated without a body diode.
        If there is a charge stored in the floating gate, the fet isn't conducting even if the gate is high.</string>
    <string name="elem_FGNFET_pin_G">Gate</string>
    <string name="elem_FGNFET_pin_S">Source</string>
    <string name="elem_FGNFET_pin_D">Drain</string>
    <string name="elem_TransGate">Transmission-Gate</string>
    <string name="elem_TransGate_tt">A real transmission-gate is build from only two transistors.
        Therefore, it is often used to save transistors during implementation on silicon.</string>
    <string name="elem_TransGate_pin_A">input A</string>
    <string name="elem_TransGate_pin_B">input B</string>
    <string name="elem_TransGate_pin_S">control input.</string>
    <string name="elem_TransGate_pin_~S">inverted control input</string>


    <!-- Misc -->

    <string name="elem_Testcase">Test case</string>
    <string name="elem_Testcase_tt">Describes a test case.
        In a test case you can describe how a circuit should behave. It can then be automatically checked whether the
        behavior of the circuit actually corresponds to this description. If this is not the case, an
        error message is shown.
    </string>
    <string name="elem_AsyncSeq">Asynchronous Timing</string>
    <string name="elem_AsyncSeq_tt">Allows configuration of the timing of an asynchronous sequential circuit such as a
        Muller-pipeline. The circuit must be started in single gate step mode and must be able to reach a stable state
        at startup. The sequential circuit can then be started interactively or with a reset gate.
        It is not allowed to use a regular clock component in this mode.</string>
    <string name="elem_PowerSupply">Power</string>
    <string name="elem_PowerSupply_tt">Has no function. Makes sure that VDD and GND are connected.
        Can be used in 74xx circuits to generate the pins for the voltage supply, which are tested for correct wiring.</string>
    <string name="elem_PowerSupply_pin_VDD">Must be connected to VDD!</string>
    <string name="elem_PowerSupply_pin_GND">Must be connected to GND!</string>
    <string name="elem_Reset">Reset</string>
    <string name="elem_Reset_pin_Reset">Reset Output.</string>
    <string name="elem_Reset_tt">The output of this component is held high during the initialisation of the circuit.
        After the circuit has stabilized the output goes to low.
        If the output is inverted it behaves the opposite way.</string>
    <string name="elem_Break">Break</string>
    <string name="elem_Break_pin_brk">Stops fast simulation if set to 1.</string>
    <string name="elem_Break_tt">If the input of this component becomes high, the fast forward clocking is stopped.
        You can use the component to implement a BRK assembly instruction.
        Then you can run a simulated processor until a BRK instruction is reached.
        Fast forward clocking can only be used if the real-time clock is disabled.</string>

    <string name="elem_External">External</string>
    <string name="elem_External_tt">Component to execute an external process to calculate the logic function.
        Is used to specify the behaviour of a component by VHDL or Verilog.
        The actual simulation of the behavior must be done with an external simulator.
        At present only the VHDL simulator ghdl and the verilog simulator Icarus Verilog are supported.
    </string>

    <string name="elem_Diode">Diode</string>
    <string name="elem_Diode_tt">Simplified bidirectional diode. It is used to implement a wired AND or a wired OR..
        This is a ideal diode: There is no voltage drop across a forward-biased diode.</string>


    <string name="error">Error</string>
    <string name="err_N_isNotInputOrOutput">Pin {0} in component {1} is not a input or output</string>
    <string name="err_aSingleClockNecessary">A single clock component is necessary. All flip-flops must use this clock signal.</string>
    <string name="err_analyseNoInputs">The circuit has no labeled inputs</string>
    <string name="err_analyseNoOutputs">The circuit has no labeled outputs</string>
    <string name="err_breakTimeOut">Break timeout after {0} cycles</string>
    <string name="err_builder_exprNotSupported">Expression {0} not supported</string>
    <string name="err_builder_operationNotSupported">Operation {0} not supported</string>
    <string name="err_burnError">More then one output is active on a wire, causing a short circuit.</string>
    <string name="err_pullUpAndDown">It is not allowed to connect a pull-up and pull-down resistor to the same net.</string>
    <string name="err_cannotAnalyse_N">Cannot analyse Node {0}</string>
    <string name="err_containsVarAndNotVar">Contains [var] and [not var]</string>
    <string name="err_duplicatePinLabel">Pin {0} in component {1} exists twice</string>
    <string name="err_element_N_notFound">Component {0} not found</string>
    <string name="err_exact_N0_valuesNecessaryNot_N1">Exact {0} valoas necessary, not {1}</string>
    <string name="err_ffNeedsToBeConnectedToClock">Flip-flop needs to be connected to the clock.</string>
    <string name="err_invalidFileFormat">Invalid file format</string>
    <string name="err_isAlreadyInitialized">Logic is already initialized</string>
    <string name="err_labelNotConnectedToNet_N">A tunnel {0} is not connected!</string>
    <string name="err_moreThenOneClocksFound">There are more then one clock</string>
    <string name="err_needs_N0_bits_found_N2_bits">There are {0} bits needed, but {1} bits found</string>
    <string name="err_netOfPin_N_notFound">Net of pin {0} not found</string>
    <string name="err_noClockFound">No clock found in logic</string>
    <string name="err_noInputsAvailable">No inputs available to set</string>
    <string name="err_noShapeFoundFor_N">No shape found for component {0}</string>
    <string name="err_noValueSetFor_N0_atElement_N1">Nothing connected to input ''{0}'' at component ''{1}''. Open inputs are not allowed.</string>
    <string name="err_notAllOutputsSameBits">Not all connected outputs have the same bit count</string>
    <string name="err_notAllOutputsSupportHighZ">If multiple outputs are connected together, all of them have to be three-state outputs.</string>
    <string name="err_noOutConnectedToWire">No output connected to a wire ({0}). The state of the wire is undefined.</string>
    <string name="err_oneResultIsRequired">Table to small: One result is required!</string>
    <string name="err_output_N_notDefined">Output {0} not defined</string>
    <string name="err_pinMap_NoNameForPin_N">No label for pin {0}</string>
    <string name="err_pinMap_Pin_N_AssignedTwicePin">Pin {0} assigned twice!</string>
    <string name="err_pinMap_noEqualsfound">No = found!</string>
    <string name="err_pinMap_pin_N0_isNotAnInput">Pin {0} is not an input!</string>
    <string name="err_pinMap_pin_N0_isNotAnOutput">Pin {0} is not an output!</string>
    <string name="err_pinMap_toMannyInputsDefined">To many inputs used!</string>
    <string name="err_pinMap_toMannyOutputsDefined">To many outputs used!</string>
    <string name="err_pinNotPresent">Pin not present</string>
    <string name="err_pinWithoutName">Found a pin without a label.</string>
    <string name="err_clockWithoutName">Found a clock without a label. If a clock is embedded also the clock needs a label.</string>
    <string name="err_pin_N0_atElement_N1_notFound">Pin {0} not found at component {1}</string>
    <string name="err_pin_N_notFound">Pin {0} not found</string>
    <string name="err_pin_N_unknown">Pin {0} unknown</string>
    <string name="err_seemsToOscillate">Logic seems to oscillate.
        To analyse you can run the circuit in single gate step mode.</string>
    <string name="err_portIsInUse">The remote port is in use! Is there an other instance running?</string>
    <string name="err_selectorInputCountMismatch">Number of inputs does not match selector bit count</string>
    <string name="err_spitterDefSyntaxError">Syntax error in splitter definition {0}</string>
    <string name="err_splitterBitsMismatch">Bit count of splitter is not matching</string>
    <string name="err_splitterNotAllBitsDefined">Not all input bits are defined!</string>
    <string name="err_splitterNotUnambiguously">Input bits are defined several times!</string>
    <string name="err_spitterToManyBits">Only 64 bits allowed in splitter!</string>
    <string name="err_tableBecomesToSmall">Two inputs are required!</string>
    <string name="err_toManyInputs_max_N0_is_N1">To many variables (inputs+flip-flops), allowed are {0} but {1} are found.</string>
    <string name="err_toManyInputsIn_N0_max_N1_is_N2">To many variables used in {0},
        allowed are {1} variables but {2} are found.</string>
    <string name="err_varNotAllowedInCUPL_N">Variable {0} is not allowed in CUPL source!</string>
    <string name="err_varNotDefined_N">Variable {0} not defined</string>
    <string name="err_parserUnexpectedToken_N">Unexpected Token {0}</string>
    <string name="err_parserMissingClosedParenthesis">Missing closed parenthesis</string>
    <string name="err_notANumber_N0_inLine_N1">Value {0} in line {1} is not a number!</string>
    <string name="err_testDataExpected_N0_found_N1_numbersInLine_N2">Expected {0} but found {1} values in line {2}!</string>
    <string name="err_unexpectedToken_N0_inLine_N1">Unexpected token ({0}) in line {1}.</string>
    <string name="err_variable_N0_notFound">Variable {0} not found!</string>
    <string name="err_noTestInputSignalsDefined">No input signals defined in test vector!</string>
    <string name="err_noTestOutputSignalsDefined">No output signals defined in test vector!</string>
    <string name="err_noTestData">No test data found.</string>
    <string name="err_remoteExecution">Error during execution of a remote command</string>
    <string name="err_pullUpAndDownNotAllowed">It's not allowed to connect a pull up and a pull down resistor to a single wire.</string>
    <string name="err_openingDocumentation">Could not open the browser.</string>
    <string name="err_couldNotCreateFolder_N0">Could not create folder &quot;{0}&quot;!</string>
    <string name="err_switchHasNoNet">It is not allowed to connect only inputs to a switch.</string>
    <string name="err_file_N0_ExistsTwiceBelow_N1">The file {0} exists multiple times below {1}.</string>
    <string name="err_couldNotFindIncludedFile_N0">Could not find the file {0}.</string>
    <string name="err_postProcessErrorIn_N0">Error during execution of &quot;{0}&quot;.</string>
    <string name="err_processDoesNotTerminate_N">The process &quot;{0}&quot; does not return!</string>
    <string name="err_processExitedWithError_N1_N2">The process returns the non zero value {0}: {1}</string>
    <string name="err_errorRunningFitter">Error starting the external fitter!</string>
    <string name="err_noExpressionsAvailable">There are no minimized equations!</string>
    <string name="err_varName_N_UsedTwice">The variable {0} is used twice!</string>
    <string name="err_fileNeedsToBeSaved">The file needs to be saved!</string>
    <string name="err_recursiveNestingAt_N0">The circuit {0} imports itself!</string>
    <string name="err_minimizationFailed">The result of the minimization is not correct!
        The names of the variables may not be unique.</string>
    <string name="err_toManyIterations">To many iterations in a loop.</string>
    <string name="err_diodeNeedsPullUpResistorAtOutput">Diode needs a pull up resistor at its output!</string>
    <string name="err_diodeNeedsPullDownResistorAtOutput">Diode needs a pull down resistor at its output!</string>
    <string name="err_testSignal_N_notFound">Test signal {0} not found in the circuit!</string>
    <string name="err_toManyBits_Found_N0_maxIs_N1">Only {1} bits allowed, but {0} bits found!</string>
    <string name="err_MultiBitFlipFlopFound">Flip-flops with more then one bits are not allowed!</string>
    <string name="err_invalidTransmissionGateState">The two control inputs of a transmission gate must be inverted!</string>
    <string name="err_nameUsedTwice_N">Signal {0} is used twice!</string>
    <string name="err_errorParsingTestdata">Error parsing the test data.</string>
    <string name="err_backtrackOf_N_isImpossible">The model component {0} can not be analysed.</string>
    <string name="err_errorInPowerSupply">Error in wiring of power supply at {0}.</string>
    <string name="err_pinIsNotANumber_N">The pin nummer {0} is not a integer!</string>
    <string name="err_vhdlExporting">Error during export to VHDL.</string>
    <string name="err_vhdlNoEntity_N">No VHDL code for {0} available!</string>
    <string name="err_verilogNoElement_N">No Verilog code for {0} available!</string>
    <string name="err_vhdlPin_N_hasNoNumber">Pin {0} has no number!</string>
    <string name="err_vhdlErrorWritingTestBench">Error creating a test bench!</string>
    <string name="err_vhdlValuesOfType_N_notAllowed">Values of typ {0} are not allowed!</string>
    <string name="err_vhdlANameIsMissing">A name is missing. Have e.g. all pins a label set?</string>
    <string name="err_toManyVars">To many variables!</string>
    <string name="err_invalidExpression">Invalid expression!</string>
    <string name="err_function_N0_notFoundInLine_N1">Function {0} not found in line {1}!</string>
    <string name="err_wrongNumOfArgsIn_N0_InLine_N1_found_N2_expected_N3">Number of arguments in function {0} in line {1} not correct (found {2}, expected {3})!</string>
    <string name="err_invalidValue_N0_inFunction_N1">Invalid value {0} in function {1}!</string>
    <string name="err_Node_N_isAComponent">The name {0} is not a path element.</string>
    <string name="err_loadingLibrary">Error during loading of a library.</string>
    <string name="err_noManifestFound">The JAR file contains no manifest!</string>
    <string name="err_noMainFoundInManifest">The manifest does not contain a Main-Class entry!</string>
    <string name="err_mainClass_N_NotFound">Could not find the class {0}!</string>
    <string name="err_couldNotInitializeMainClass_N">Could not create an instance of the class {0}!</string>
    <string name="err_notMoreOutBitsThanInBits">There must be more input bits than output bits!</string>
    <string name="err_constantsNotAllowed">It is not possible to set physical pins to constant values!</string>
    <string name="err_invalidNumberFormat_N_N">The string {0} is not a valid number (pos {1})!</string>
    <string name="err_invalidPinName_N">The name &quot;{0}&quot; is not allowed!</string>
    <string name="err_whiteSpaceNotAllowedInTT2Name">No white space is allowed in the name of the TT2 file!</string>
    <string name="err_tableHasToManyResultColumns">The table has too many columns!</string>
    <string name="err_errorExportingZip">Error writing the zip file.</string>
    <string name="err_moreThanOneFastClock">Only one clock component with high frequency is allowed.</string>
    <string name="err_circuitHasCycles">The circuit contains cycles. It's not possible to analyze such a circuit.
        Cycles arise if an output of a gate is fed back to one of the inputs of the same gate.
        The use of switches, FETs or relays also causes cycles.</string>
    <string name="err_monoflopRequiresOneClock">If a monoflop is used, there must be exactly one clock component!</string>
    <string name="err_centralDefinedRomsAreNotSupported">ROM's defined in the settings are not supported!</string>
    <string name="err_couldNotCreateElement_N">Could not create a component of type {0}!</string>

    <string name="err_errorWritingDataToProcess">Could not write values to the external process!</string>
    <string name="err_errorReadingDataFromProcess">Could not read values from the external process!</string>
    <string name="err_errorCreatingProcess">Could not create the external process!</string>
    <string name="err_timeoutReadingData_O">Timeout reading data from external process!
        {0}</string>
    <string name="err_notEnoughDataReceived_O">Not enough data received!
        {0}</string>
    <string name="err_invalidCharacterReceived_N_O">The received text contains an invalid character: {0}!
        {1}</string>
    <string name="err_processTerminatedUnexpected_O">The process has terminated unexpected!
        {0}</string>
    <string name="err_couldNotTerminateProcess">Could not terminate the process!</string>
    <string name="err_couldNotStartProcess_N">Could not start process: {0}</string>
    <string name="err_exitValueNotNull_N_O">Application exit status was not 0 but {0}:
        {1}</string>
    <string name="err_canOnlyExportExternalVHDL">External code can only be exported if it is VHDL!</string>
    <string name="err_canOnlyExportExternalVerilog">External code can only be exported if it is Verilog!</string>
    <string name="err_ifExternalComponentIsUsedTwiceCodeMustBeIdentical_N">If an external component is used multiple times, the code must be identical! Effects: {0}</string>
    <string name="err_writingToStdOut_O">Could not write to stdOut:
        {0}</string>
    <string name="err_ghdlNotInstalled">
        The VHDL simulator ghdl does not seem to be installed. Install ghdl (http://ghdl.free.fr/) and try again. If there are still problems, check the path to the ghdl executable in the Digital settings.
    </string>
    <string name="err_iverilogNotInstalled">
        The Verilog simulator Icarus does not seem to be installed. Install ghdl (http://iverilog.icarus.com/) and try again. If there are still problems, check the path to the iverilog executable in the Digital settings.
    </string>
    <string name="err_errorAnalysingCircuit_N">Error analysing the circuit: {0}</string>
    <string name="err_romNeedsALabelToBeExported">Every ROM needs a unique label to be exported!</string>
    <string name="err_counterNeedsMoreBits">The counter needs at least two bits.</string>
    <string name="err_namesAreNotUnique_N">The name "{0}" is  not unique!</string>
    <string name="err_clocksNotAllowedInAsyncMode">Clock elements can not be used in asynchronous mode.</string>
    <string name="err_verilogExporting">Error during export to Verilog.</string>
    <string name="err_noRomFound">No program memory found! The program memory needs to be flagged as such.</string>
    <string name="err_moreThenOneRomFound">More then one program memories found! Only one program memory must be flages as such.</string>
    <string name="err_errorLoadingRomData">Error loading the program memory.</string>
    <string name="err_parsingSVG">Error while reading the SVG file.</string>

    <string name="key_AddrBits">Address Bits</string><!-- ROM, RAMDualPort, RAMSinglePort, RAMSinglePortSel, EEPROM -->
    <string name="key_AddrBits_tt">Number of address bits used.</string>
    <string name="key_Bits">Data Bits</string><!-- And, NAnd, Or, NOr, XOr, XNOr, Not, LookUpTable, Delay, Out, In, Ground, VDD, Const, PullUp, PullDown, Driver, DriverInvSel, Multiplexer, Demultiplexer, D_FF, D_FF_AS, Register, ROM, RAMDualPort, RAMSinglePort, RAMSinglePortSel, EEPROM, GraphicCard, Counter, Add, Sub, Mul, BarrelShifter, Comparator, Neg, BitCount, Switch, Relay, PFET, NFET, FGPFET, FGNFET, TransGate -->
    <string name="key_Bits_tt">Number of data bits used.</string>
    <string name="key_Color">Color</string><!-- LED, LightBulb, Seven-Seg, Seven-Seg-Hex, LedMatrix -->
    <string name="key_Color_tt">The Color of the element.</string>
    <string name="key_backgroundColor">Background color</string>
    <string name="key_backgroundColor_tt">Background color of the circuit when it is embedded in another circuit. Is not used for DIL packages.</string>
    <string name="key_Cycles">Timeout cycles</string><!-- Break -->
    <string name="key_Cycles_tt">If this amount of cycles is reached without a break signal, an error is created.</string>
    <string name="key_Data">Data</string><!-- LookUpTable, ROM, EEPROM -->
    <string name="key_Data_tt">The values stored in this element.</string>
    <string name="key_Default">Default</string><!-- Demultiplexer, RS_FF, JK_FF, D_FF, T_FF, JK_FF_AS, D_FF_AS -->
    <string name="key_Default_tt">This value is set if the circuit is started.
        At the demultiplexer, this value is set for the non-selected outputs.</string>
    <string name="key_InDefault">Default</string><!-- In -->
    <string name="key_InDefault_tt">This value is set if the circuit is started. A "Z" means high-z state.</string>
    <string name="key_isHighZ">Is three-state input</string><!-- In, Splitter -->
    <string name="key_isHighZ_tt">If set the input is allowed to be in high-z state. At the input component this is
        also allowed if high-z ("Z") is set as the default value.</string>
    <string name="key_Description">Description</string><!-- Out, In, Text -->
    <string name="key_Description_tt">A short description of this element and its usage.</string>
    <string name="key_Frequency">Frequency/Hz</string><!-- Clock -->
    <string name="key_Frequency_tt">The real time frequency used for the real time clock</string>
    <string name="key_IEEEShapes">Use IEEE 91-1984 shapes</string>
    <string name="key_IEEEShapes_tt">Use IEEE 91-1984 shapes instead of rectangular shapes</string>
    <string name="key_Inputs">Number of Inputs</string><!-- And, NAnd, Or, NOr, XOr, XNOr, LookUpTable -->
    <string name="key_Inputs_tt">The Number of Inputs used. Every input needs to be connected.</string>
    <string name="key_Label">Label</string><!-- Out, LED, In, Clock, Button, Probe, LightBulb, LedMatrix, RotEncoder, Keyboard, Terminal, RS_FF, JK_FF, D_FF, T_FF, JK_FF_AS, D_FF_AS, Register, ROM, RAMDualPort, RAMSinglePort, RAMSinglePortSel, EEPROM, GraphicCard, Counter, Add, Sub, Mul, BarrelShifter, Comparator, Switch, Relay, PFET, NFET, FGPFET, FGNFET, Testcase, PowerSupply, Reset, Break -->
    <string name="key_Label_tt">The name of this element.</string>
    <string name="key_Size">Size</string><!-- LED, SevenSeg -->
    <string name="key_Size_tt">The size of the shape in the circuit.</string>
    <string name="key_Language">Language</string>
    <string name="key_Language_tt">Language of the GUI. Will only take effect after a restart.</string>
    <string name="key_NetName">Net name</string><!-- Tunnel -->
    <string name="key_NetName_tt">All nets with identical name are connected together.</string>
    <string name="key_InputSplitting">Input Splitting</string><!-- Splitter -->
    <string name="key_InputSplitting_tt">If e.g. four bits, two bits and two further bits are to be used as inputs,
        this can be configured with "4,2,2". The number indicates the number of bits. For convenience, the asterisk
        can be used: 16 bits can be configured with "[Bits]*[Number]" as "1*16".
        It is also possible to specify the bits to be used directly and in any order.
        For example, "4-7,0-3" configures bits 4-7 and 0-3. This notation allows any bit arrangement.
        The input bits must be specified completely and unambiguously.</string>
    <string name="key_OutputSplitting">Output splitting</string><!-- Splitter -->
    <string name="key_OutputSplitting_tt">If e.g. four bits, two bits and two further bits are to be used as outputs,
        this can be configured with "4,2,2". The number indicates the number of bits. For convenience, the asterisk
        can be used: 16 bits can be configured with "[Bits]*[Number]" as "1*16".
        It is also possible to specify the bits to be used directly and in any order.
        For example, "4-7,0-3" configures bits 4-7 and 0-3. This notation allows any bit arrangement.
        Output bits can also be output several times: "0-7,1-6,4-7"</string>
    <string name="key_SelectorBits">Number of Selector Bits</string><!-- Multiplexer, Demultiplexer, Decoder -->
    <string name="key_SelectorBits_tt">Number of bits used for the selector input.</string>
    <string name="key_Signed">Signed Operation</string><!-- Comparator, Div -->
    <string name="key_Signed_tt">If selected the operation is performed with signed (2th complement) values.</string>
    <string name="key_Closed">Closed</string><!-- Switch -->
    <string name="key_Closed_tt">Sets the initial state of the switch.</string>
    <string name="key_Value">Value</string><!-- Const -->
    <string name="key_Value_tt">The value of the constant.</string>
    <string name="key_Width">Width</string>
    <string name="key_Width_tt">With of symbol if this circuit is used as an component in an other circuit.</string>
    <string name="key_Height">Height</string>
    <string name="key_Height_tt">Height of symbol if this circuit is used as an component in an other circuit.</string>
    <string name="key_autoReload">Reload at model start</string><!-- ROM -->
    <string name="key_autoReload_tt">Reloads the hex file every time the model is started.</string>
    <string name="key_flipSelPos">Flip selector position</string><!-- Driver, DriverInvSel, Multiplexer, Demultiplexer, Decoder -->
    <string name="key_flipSelPos_tt">This option allows you to move te selector pin to the opposite side of the plexer.</string>
    <string name="key_intFormat">Number Format</string><!-- Probe -->
    <string name="key_intFormat_tt">The format used to show the numbers.</string>
    <string name="key_intFormat_ascii">ascii</string>
    <string name="key_intFormat_bin">bin</string>
    <string name="key_intFormat_dec">decimal</string>
    <string name="key_intFormat_decSigned">signed decimal</string>
    <string name="key_intFormat_def">default</string>
    <string name="key_intFormat_hex">hex</string>
    <string name="key_barrelSigned">shift input has sign</string><!-- BarrelShifter -->
    <string name="key_barrelSigned_tt">shift input data has two complement format</string>
    <string name="key_barrelShifterMode">Mode</string><!-- BarrelShifter -->
    <string name="key_barrelShifterMode_tt">Mode of barrel shifter</string>
    <string name="key_barrelShifterMode_logical">Logical</string>
    <string name="key_barrelShifterMode_rotate">Rotate</string>
    <string name="key_barrelShifterMode_arithmetic">Arithmetic</string>
    <string name="key_direction">Direction</string><!-- BarrelShifter -->
    <string name="key_direction_tt">Set direction.</string>
    <string name="key_direction_left">left</string>
    <string name="key_direction_right">right</string>
    <string name="key_maxStepCount">Max number of steps to show</string><!-- Data -->
    <string name="key_maxStepCount_tt">The maximal number of values stored.
        If the maximum number is reached, the oldest values are discarded.</string>
    <string name="key_microStep">Show single gate steps</string><!-- Data -->
    <string name="key_microStep_tt">Shows all single step steps in the graphic.</string>
    <string name="key_rotation">Rotation</string><!-- And, NAnd, Or, NOr, XOr, XNOr, Not, LookUpTable, Delay, Out, LED, In, Clock, Button, Probe, LightBulb, LedMatrix, RotEncoder, Keyboard, Terminal, Ground, VDD, Const, Tunnel, Splitter, PullUp, PullDown, Driver, DriverInvSel, Multiplexer, Demultiplexer, Decoder, RS_FF, JK_FF, D_FF, T_FF, JK_FF_AS, D_FF_AS, Register, ROM, RAMDualPort, RAMSinglePort, RAMSinglePortSel, EEPROM, GraphicCard, Counter, Add, Sub, Mul, BarrelShifter, Comparator, Neg, BitCount, DiodeForward, DiodeBackward, Switch, Fuse, Relay, PFET, NFET, FGPFET, FGNFET, TransGate, PowerSupply, Reset, Break -->
    <string name="key_rotation_tt">The orientation of the Element in the circuit.</string>
    <string name="key_runRealTime">Start real time clock</string><!-- Clock -->
    <string name="key_runRealTime_tt">If enabled the runtime clock is started when the circuit is started</string>
    <string name="key_showDataGraph">Show measurement graph at simulation start</string>
    <string name="key_showDataGraph_tt">When the simulation is started, a graph with the measured values is shown.</string>
    <string name="key_showDataGraphMicro">Show measurement graph in single gate step mode at simulation start</string>
    <string name="key_showDataGraphMicro_tt">When the simulation is started, a graph with the measured values in the
        gate step mode is shown. All gate changes are included in the graph.</string>
    <string name="key_showDataTable">Show measurement values at simulation start</string>
    <string name="key_showDataTable_tt">When the simulation is started, a table with the measured values is shown.</string>
    <string name="key_termHeight">Lines</string><!-- Terminal -->
    <string name="key_termHeight_tt">The number of lines to show.</string>
    <string name="key_termWidth">Characters per line</string><!-- Terminal -->
    <string name="key_termWidth_tt">The number of characters shown in a single line.</string>
    <string name="key_valueIsProbe">Use as measurement value</string><!-- RS_FF, JK_FF, D_FF, T_FF, JK_FF_AS, D_FF_AS, Register -->
    <string name="key_valueIsProbe_tt">Is set the value is a measurement value and appears in the graph and data table.
        In addition, a label must be specified that can serve as identification of the value.</string>
    <string name="key_Testdata">Test data</string><!-- Testcase -->
    <string name="key_Testdata_tt">The description of the test case.
        Details of the syntax can be found in the help dialog of the test data editor.</string>
    <string name="key_graphicWidth">Width in pixels</string><!-- GraphicCard -->
    <string name="key_graphicWidth_tt">The screen width in pixels.</string>
    <string name="key_graphicHeight">Height in pixels</string><!-- GraphicCard -->
    <string name="key_graphicHeight_tt">The screen height in pixels.</string>
    <string name="key_isProgramMemory">Program Memory</string><!-- ROM -->
    <string name="key_isProgramMemory_tt">Makes this ROM to program memory. So it can be accessed by an external IDE.</string>
    <string name="key_isProgramCounter">Program Counter</string>
    <string name="key_isProgramCounter_tt">Makes this register a program counter. The value of this register is returned
        to the external assembler IDE to mark the current line of code during debugging.</string>
    <string name="key_Blown">Programmed</string><!-- DiodeForward, DiodeBackward, Fuse, FGPFET, FGNFET -->
    <string name="key_Blown_tt">If set a diode is "blown" or "programmed".
        At a floating gate FET the floating gate is charged.
        You can change this setting with the key 'p'.</string>
    <string name="key_ExpressionFormat">Format</string>
    <string name="key_ExpressionFormat_tt">Screen format of expressions.</string>
    <string name="key_relayNormallyClosed">Relay is normally closed.</string><!-- Relay -->
    <string name="key_relayNormallyClosed_tt">If set the relay is closed if the input is low.</string>
    <string name="key_poles">Pole count</string><!-- Relay -->
    <string name="key_poles_tt">Number of poles available.</string>
    <string name="key_commonCathode">Common Cathode</string><!-- Seven-Seg -->
    <string name="key_commonCathode_tt">If selected the common cathode input is also simulated.</string>
    <string name="key_ledPersistence">Avoid Flicker</string><!-- Seven-Seg, LedMatrix -->
    <string name="key_ledPersistence_tt">It is not possible to increase the frequency so much that the flickering disappears.
        With this option you can stabilize the display by keeping the LEDs on until the common cathode goes down again.
        This simulates a frequency above the critical flicker fusion frequency.</string>
    <string name="key_atf1502Fitter">ATF15xx Fitter</string>
    <string name="key_atf1502Fitter_tt">Path to the fitter for the ATF15xx.
        Enter the directory which contains the fit15xx.exe files provided by Microchip (former ATMEL).</string>
    <string name="key_pin">Pin number</string>
    <string name="key_pin_tt">An empty field means this signal is not assigned to a pin.</string>
    <string name="key_rowDataBits">Rows</string><!-- LedMatrix -->
    <string name="key_rowDataBits_tt">Specifies the number of rows by specifying the number of bits of the row word.</string>
    <string name="key_colAddrBits">Address bits of columns</string><!-- LedMatrix -->
    <string name="key_colAddrBits_tt">Addresses the individual columns. Three bits means eight columns.</string>
    <string name="key_lockedMode">Modification locked</string>
    <string name="key_lockedMode_tt">The circuit is locked. It is possible to configure diodes and FGF-FETs.</string>
    <string name="key_pinNumber">Pin number</string><!-- Out, In, Clock -->
    <string name="key_pinNumber_tt">Number of this pin. Used for the representation of a circuit as a DIL package and
        the pin assignment when programming a CPLD.
        If there are several bits, all pin numbers can be specified as a comma-separated list.</string>
    <string name="key_pinCount">Number of DIL pins</string>
    <string name="key_pinCount_tt">Number of pins. A zero means that the number od pins is determined automatically.</string>
    <string name="key_defTreeSelect">Component tree view is visible at startup.</string>
    <string name="key_defTreeSelect_tt">If set, the component tree view is enabled at startup.</string>
    <string name="key_inverterConfig">inverted Inputs</string><!-- And, NAnd, Or, NOr, XOr, XNOr, RS_FF, JK_FF, D_FF, T_FF, JK_FF_AS, D_FF_AS, Counter -->
    <string name="key_inverterConfig_tt">You can select the inputs that are to be inverted.</string>
    <string name="key_fontSize">Menus Font Size [%]</string>
    <string name="key_fontSize_tt">Size of the fonts used in the menu in percent of the default size.</string>
    <string name="key_withEnable">Enable Input</string><!-- T_FF -->
    <string name="key_withEnable_tt">If set an enable input (T) is available.</string>
    <string name="key_unidirectional">Unidirectional</string><!-- PFET, NFET -->
    <string name="key_unidirectional_tt">Unidirectional transistors propagate a signal only from source to drain. They are
        much faster to simulate than bidirectional transistors. Since there is no feedback from drain to source, in this
        mode, the transistor can not short the connected wires when it is conducting. Thus, this mode is necessary to
        simulate certain CMOS circuits.</string>
    <string name="key_activeLow">Active Low</string><!-- Button -->
    <string name="key_activeLow_tt">If selected the output is low if the component is active.</string>
    <string name="key_libraryPath">Library</string>
    <string name="key_libraryPath_tt">Folder which contains the library with predefined sub circuits.
        Contains, for example, the components of the 74xx series. You also can add your own circuits by storing
        them at this location.
        It must be ensured that the names of all files in this folder and all subfolders are unique.</string>
    <string name="key_grid">Show Grid</string>
    <string name="key_grid_tt">Shows a grid in the main window.</string>
    <string name="key_mapToKey">Map to keyboard</string><!-- Button -->
    <string name="key_mapToKey_tt">Button is mapped to the keyboard.
        To use the cursor keys use UP, DOWN, LEFT or RIGHT as label.</string>
    <string name="key_jarPath">Java library</string>
    <string name="key_jarPath_tt">A jar file containing additional components implemented in java.</string>
    <string name="key_showWireBits">Shows the number of wires on a bus.</string>
    <string name="key_showWireBits_tt">CAUTION: The value is only updated when the simulation starts.</string>
    <string name="key_inputBits">Input Bit Width</string><!-- BitExtender -->
    <string name="key_inputBits_tt">The number of output bits must be greater than the number of input bits.</string>
    <string name="key_outputBits">Output Bit Width</string><!-- BitExtender -->
    <string name="key_outputBits_tt">The number of output bits must be greater than the number of input bits.</string>
    <string name="key_textFontSize">Font Size</string>
    <string name="key_textFontSize_tt">Sets the font size to use for this text.</string>
    <string name="key_delayTime">Duration</string>
    <string name="key_delayTime_tt">Delay time in units of the common gate propagation delay.</string>
    <string name="key_invertOutput">inverted output</string>
    <string name="key_invertOutput_tt">If selected the output is inverted.</string>
    <string name="key_timerDelay">Pulse Width</string>
    <string name="key_timerDelay_tt">The puls width is measured in clock cycles.</string>
    <string name="key_splitterSpreading">Spreading</string>
    <string name="key_splitterSpreading_tt">Configures the spread of the inputs and outputs in the circuit.</string>
    <string name="key_romContent">Content of ROM's</string>
    <string name="key_romContent_tt">Content of all used ROM's</string>

    <string name="key_applicationType">Application</string>
    <string name="key_applicationType_tt">Defines which application to use.</string>
    <string name="key_applicationType_Generic">Generic</string>
    <string name="key_applicationType_GHDL">GHDL</string>
    <string name="key_applicationType_IVERILOG">IVerilog</string>
    <string name="key_externalInputs">Inputs</string>
    <string name="key_externalInputs_tt">The inputs of the external process.
        It is a comma-separated list of signal names. For each signal name, with a colon separated, a number of bits
        can be specified. The inputs of an 8-bit adder could thus be described as "a:8,b:8,c_in".</string>
    <string name="key_externalOutputs">Outputs</string>
    <string name="key_externalOutputs_tt">The outputs of the external process.
        It is a comma-separated list of signal names. For each signal name, with a colon separated, a number of bits
        can be specified. The outputs of an 8-bit adder could thus be described as "s:8,c_out".</string>
    <string name="key_Code">Programcode</string>
    <string name="key_Code_tt">The programm code to be executed by the external application.</string>
    <string name="key_ghdlPath">GHDL</string>
    <string name="key_ghdlPath_tt">Path to the executable ghdl file. Only necessary if you want to use ghdl to simulate
        components defined with vhdl.</string>
    <string name="key_iverilogPath">IVerilog</string>
    <string name="key_iverilogPath_tt">Path to the Icarus verilog installation folder. Only necessary if you want to use iverilog to simulate
        components defined with verilog.</string>
    <string name="key_maxValue">Maximum Value</string>
    <string name="key_maxValue_tt">If a zero is entered, the maximum possible value is used (all bits are one).</string>

    <string name="key_dipDefault">Output is High</string>
    <string name="key_dipDefault_tt">The default output value of the DIP switch when the simulation starts.</string>

    <string name="key_macMouse">Use MacOS mouse clicks.</string>
    <string name="key_macMouse_tt">Uses CTRL-click instead of right-click.</string>
    <string name="key_noComponentToolTips">No tool tips for components on the main panel.</string>
    <string name="key_noComponentToolTips_tt">If set, no tool tips for the components on the main panel are displayed.
        Especially in a presentation, these tool tips can be very annoying.</string>

    <string name="key_ATMISP">ATMISP</string>
    <string name="key_ATMISP_tt">Path to the executable file ATMISP.exe. If set, the ATMISP software can be started automatically!</string>

    <string name="key_customShape">Custom Shape</string>
    <string name="key_customShape_tt">Import of a SVG-file</string>

    <string name="key_preloadProgram">Preload program memory at startup.</string>
    <string name="key_preloadProgram_tt">When simulating a processor that uses a RAM device as the program memory,
        it is difficult to start this processor because the RAM contents are always initialized with zeros at the start
        of the simulation. This setting allows loading data into the program memory at startup.
        The program memory in the simulation must be marked as such.
    </string>
    <string name="key_preloadProgramFile">Program file</string>
    <string name="key_preloadProgramFile_tt">File which should be loaded into the program memory at the start of the
        simulation.
    </string>
    <string name="key_wideShape">Wide Shape</string>
    <string name="key_wideShape_tt">Uses a wider shape to visualize the gate.</string>
    <string name="key_wideShapeAsDefault">Use wider shapes by default.</string>
    <string name="key_wideShapeAsDefault_tt">If new gates are inserted, the wide variant is selected by default.</string>

    <string name="key_shapeType">Shape</string>
    <string name="key_shapeType_tt">The shape to be used for the representation of the circuit in an embedding circuit.
        In the "Simple" mode, the inputs are displayed on the left and the outputs on the right side of a simple rectangle.
        With "Layout", the position of the inputs and outputs and and their orientation in the circuit determines
        the position of the pins. Here are also pins at the top or bottom possible.
        When selecting "DIL-Chip", a DIL housing is used to display the circuit. The pin numbers of the inputs and outputs
        determine the position of the pins in this case.
    </string>
    <string name="key_shapeType_DEFAULT">Default</string>
    <string name="key_shapeType_SIMPLE">Simple</string>
    <string name="key_shapeType_DIL">DIL-Chip</string>
    <string name="key_shapeType_LAYOUT">Layout</string>
    <string name="key_shapeType_CUSTOM">User defined</string>

    <string name="key_textOrientation">Orientation</string>
    <string name="key_textOrientation_tt">Position of the coordinate relative to the text.</string>
    <string name="key_textOrientation_LEFTBOTTOM">left bottom</string>
    <string name="key_textOrientation_CENTERBOTTOM">center bottom</string>
    <string name="key_textOrientation_RIGHTBOTTOM">right bottom</string>
    <string name="key_textOrientation_RIGHTCENTER">right center</string>
    <string name="key_textOrientation_RIGHTTOP">right top</string>
    <string name="key_textOrientation_CENTERTOP">center top</string>
    <string name="key_textOrientation_LEFTTOP">left top</string>
    <string name="key_textOrientation_LEFTCENTER">left center</string>
    <string name="key_textOrientation_CENTERCENTER">center center</string>

    <string name="mod_insertWire">Inserted wire.</string>
    <string name="mod_insertCopied">Insert from clipboard.</string>
    <string name="mod_setKey_N0_in_element_N1">Value ''{0}'' in component ''{1}'' modified.</string>
    <string name="mod_setAttributesIn_N">Attributes of component ''{0}'' modified.</string>
    <string name="mod_wireDeleted">Wire deleted.</string>
    <string name="mod_movedOrRotatedElement_N">Component ''{0}'' moved or rotated.</string>
    <string name="mod_movedWire">Wire moved.</string>
    <string name="mod_deletedSelection">Selection deleted.</string>
    <string name="mod_insertedElement_N">Component ''{0}'' inserted.</string>
    <string name="mod_deletedElement_N">Component ''{0}'' deleted.</string>
    <string name="mod_insertedWire">Wire inserted.</string>
    <string name="mod_movedSelected">Selection moved.</string>
    <string name="mod_undo_N">Undo: {0}</string>
    <string name="mod_redo_N">Redo: {0}</string>
    <string name="mod_circuitAttrModified">Modified circuit attributes.</string>
    <string name="mod_modifiedMeasurementOrdering">Ordered measurements.</string>
    <string name="mod_set_N_BitsToSelection">Sets the number of data bits to {0} in selected components.</string>
    <string name="mod_groupEdit">Modified attributes of selected components.</string>
    <string name="mod_splitWire">Splits a single wire into two wires.</string>

    <string name="lib_Logic">Logic</string>
    <string name="lib_arithmetic">Arithmetic</string>
    <string name="lib_flipFlops">Flip-Flops</string>
    <string name="lib_io">IO</string>
    <string name="lib_memory">Memory</string>
    <string name="lib_mux">Plexers</string>
    <string name="lib_wires">Wires</string>
    <string name="lib_switching">Switches</string>
    <string name="lib_misc">Misc.</string>
    <string name="lib_more">more</string>
    <string name="lib_ram">RAM</string>
    <string name="lib_eeprom">EEPROM</string>

    <string name="menu_about">About</string>
    <string name="menu_analyse">Analysis</string>
    <string name="menu_analyse_tt">Analyses the actual circuit</string>
    <string name="menu_cut">Cut</string>
    <string name="menu_copy">Copy</string>
    <string name="menu_custom">Custom</string>
    <string name="menu_library">Library</string>
    <string name="menu_delete">Delete components</string>
    <string name="menu_delete_tt">Delete selected single component or group of components.</string>
    <string name="menu_edit">Edit</string>
    <string name="menu_editAttributes">Circuit specific settings</string>
    <string name="menu_editAttributes_tt">The circuit specific settings affect the behavior of the
        currently open circuit.
        Thus, e.g. the shape that represents the circuit when it is embedded in other circuits.
        These settings are stored together with the circuit.</string>
    <string name="menu_editSettings">Settings</string>
    <string name="menu_editSettings_tt">The global settings of the simulator specify, among other
        things, the language, the symbol form to be used or the paths of external tools.</string>
    <string name="menu_element">Stop Simulation</string>
    <string name="menu_element_tt">Stops the simulation and allows to edits the circuit.</string>
    <string name="menu_elements">Components</string>
    <string name="menu_export">Export</string>
    <string name="menu_exportPNGLarge">Export PNG large</string>
    <string name="menu_exportPNGSmall">Export PNG small</string>
    <string name="menu_exportSVG">Export SVG</string>
    <string name="menu_exportSVGLaTex">Export SVG + LaTeX</string>
    <string name="menu_exportSVGLaTexInOut">Export SVG + LaTeX + small in/out</string>
    <string name="menu_exportAnimatedGIF">Export Animated GIF</string>
    <string name="menu_fast">Run Fast</string>
    <string name="menu_fast_tt">Runs the circuit until a break is detected by the BRK component.</string>
    <string name="menu_file">File</string>
    <string name="menu_help">Help</string>
    <string name="menu_update">Update</string>
    <string name="menu_update_tt">Updates the components menu.</string>
    <string name="menu_maximize">Fit to window</string>
    <string name="menu_micro">Single gate stepping</string>
    <string name="menu_micro_tt">Runs the circuit in single gate step mode</string>
    <string name="menu_new">New</string>
    <string name="menu_new_tt">Creates a new, empty circuit.</string>
    <string name="menu_newSub">New embedded Circuit</string>
    <string name="menu_newSub_tt">Opens a new window to create a new embedded circuit, which than can be used in this circuit.</string>
    <string name="menu_open">Open</string>
    <string name="menu_openRecent">Open Recent</string>
    <string name="menu_openRecentNewWindow">Open Recent in New Window</string>
    <string name="menu_openWin">Open in New Window</string>
    <string name="menu_openWin_tt">Opens a circuit in a new window</string>
    <string name="menu_orderInputs">Order Inputs</string>
    <string name="menu_orderInputs_tt">Order the inputs for the usage as a embedded circuit</string>
    <string name="menu_orderMeasurements">Order measurement values</string>
    <string name="menu_orderMeasurements_tt">Orders the measurement values in the graphical and table view</string>
    <string name="menu_orderOutputs">Order Outputs</string>
    <string name="menu_orderOutputs_tt">Order the outputs for the usage as a embedded circuit.</string>
    <string name="menu_paste">Paste</string>
    <string name="menu_insertAsNew">Paste in new window</string>
    <string name="menu_insertAsNew_tt">The content of the clip board is pasted in a new window.</string>
    <string name="menu_rotate">Rotate</string>
    <string name="menu_sim">Simulation</string>
    <string name="menu_run">Start of Simulation</string>
    <string name="menu_run_tt">Starts the simulation of the circuit.</string>
    <string name="menu_save">Save</string>
    <string name="menu_saveAs">Save As</string>
    <string name="menu_saveData">Save Data</string>
    <string name="menu_saveData_tt">Save data as CSV file</string>
    <string name="menu_speedTest">Speed Test</string>
    <string name="menu_speedTest_tt">Performs a speed test by calculating the max. clock frequency.</string>
    <string name="menu_step">Step</string>
    <string name="menu_step_tt">Calculating a single gate step</string>
    <string name="menu_synthesise">Synthesise</string>
    <string name="menu_synthesise_tt">Generates the minimal bool expressions described by a truth table.</string>
    <string name="menu_table_N_variables">{0} variables</string>
    <string name="menu_table_create">Create</string>
    <string name="menu_table_createCUPL_tt">Creates a CUPL source file containing the define circuit.</string>
    <string name="menu_table_createTT2_tt">Creates a file containing the circuit similar to the Berkeley Logic Interchange Format (BLIF).
        After that the Atmel fitter is started to create the JEDEC file. </string>
    <string name="menu_table_createCircuit">Circuit</string>
    <string name="menu_table_createCircuit_tt">Creates a circuit which reproduces the truth table.</string>
    <string name="menu_table_createCircuitJK">Circuit with JK flip-flops</string>
    <string name="menu_table_createCircuitJK_tt">Creates a circuit which reproduces the truth table. Uses JK flip-flops.</string>
    <string name="menu_table_createNAnd">Circuit with NAnd gates</string>
    <string name="menu_table_createNAndTwo">Circuit with NAnd gates with two inputs</string>
    <string name="menu_table_createNAndTwo_tt">Use only NAnd gates with two inputs.</string>
    <string name="menu_table_createNAnd_tt">Creates a circuit which reproduces the truth table only with NAnd gates.</string>
    <string name="menu_table_createNOr">Circuit with NOr gates</string>
    <string name="menu_table_createNOrTwo">Circuit with NOr gates with two inputs</string>
    <string name="menu_table_createNOrTwo_tt">Use only NOr gates with two inputs.</string>
    <string name="menu_table_createNOr_tt">Creates a circuit which reproduces the truth table only with NOr gates.</string>
    <string name="menu_table_createTwo">Circuit with two input gates</string>
    <string name="menu_table_createTwo_tt">create circuit, use only gates with two inputs</string>
    <string name="menu_table_createThree">Circuit with three input gates</string>
    <string name="menu_table_createThree_tt">create circuit, use only gates with a maximum of three inputs</string>
    <string name="menu_table_create_hardware">Device</string>
    <string name="menu_table_create_jedec_tt">Creates a JEDEC file for the device</string>
    <string name="menu_table_exportTableLaTeX">Export LaTeX</string>
    <string name="menu_table_exportHex">Export HEX</string>
    <string name="menu_table_exportHex_tt">You can load the HEX file to a ROM or a LUT.</string>
    <string name="menu_table_new">New</string>
    <string name="menu_table_new_combinatorial">Combinatorial</string>
    <string name="menu_table_new_sequential">Sequential</string>
    <string name="menu_table_new_sequential_bidir">Sequential bidirectional</string>
    <string name="menu_table_columns">Columns</string>
    <string name="menu_table_reorder_inputs">Reorder/Delete Input Variables</string>
    <string name="menu_table_columnsAddVariable">Add Input Variable</string>
    <string name="menu_table_columnsAddVariable_tt">Adds a new input variable to the table.</string>
    <string name="menu_table_reorder_outputs">Reorder/Delete Output Columns</string>
    <string name="menu_table_columnsAdd">Add Output Column</string>
    <string name="menu_table_columnsAdd_tt">Adds a new result column to the table.</string>
    <string name="menu_table_set">Set</string>
    <string name="menu_table_setXTo0">Set X to 0</string>
    <string name="menu_table_setXTo0_tt">Sets the Don't Cares to 0.</string>
    <string name="menu_table_setXTo1">Set X to 1</string>
    <string name="menu_table_setXTo1_tt">Sets the Don't Cares to 1.</string>
    <string name="menu_table_JK">Create J/K Expressions</string>
    <string name="menu_table_setAllToX">Set all to X</string>
    <string name="menu_table_setAllToX_tt">Set all values to "don't care".</string>
    <string name="menu_table_setAllTo0">Set all to 0</string>
    <string name="menu_table_setAllTo0_tt">Set all values to zero.</string>
    <string name="menu_table_setAllTo1">Set all to 1</string>
    <string name="menu_table_setAllTo1_tt">Set all values to one.</string>
    <string name="menu_terminalDelete">Delete</string>
    <string name="menu_terminalDelete_tt">Delete the terminals content.</string>
    <string name="menu_view">View</string>
    <string name="menu_zoomIn">Zoom In</string>
    <string name="menu_zoomOut">Zoom Out</string>
    <string name="menu_expression">Expression</string>
    <string name="menu_expression_tt">Create a circuit from an expression.</string>
    <string name="menu_runTests">Run Tests</string>
    <string name="menu_runTests_tt">Runs all test cases in the circuit</string>
    <string name="menu_actualToDefault">Set Inputs</string>
    <string name="menu_actualToDefault_tt">Use actual input values as new default values.</string>
    <string name="menu_restoreAllFuses">Reset all diodes and FGFETs</string>
    <string name="menu_restoreAllFuses_tt">Resets all diodes (fuses) and FGFETs to the "not programed" state. The actual fuse configuration is lost!</string>
    <string name="menu_programDiode">Program diode</string>
    <string name="menu_help_elements">Components</string>
    <string name="menu_help_elements_tt">Shows a list of all available components.</string>
    <string name="menu_viewHelp">Help Dialog</string>
    <string name="menu_viewHelp_tt">Shows the help dialog describing the actual circuit.</string>
    <string name="menu_probe_memory">Memory</string>
    <string name="menu_probe_memory_tt">Shows the content of memory components.</string>
    <string name="menu_treeSelect">Component Tree View</string>
    <string name="menu_treeSelect_tt">Shows a tree view of available components at the left side.</string>
    <string name="menu_karnaughMap">K-Map</string>
    <string name="menu_karnaughMap_tt">Shows a K-map representation of the Table!</string>

    <string name="menu_special">Special 74xx Funtions</string>
    <string name="menu_addPrefix">Add IO-Prefix</string>
    <string name="menu_addPrefix_tt">A prefix is added to all selected inputs and outputs.
        Is used to simplify the doubling of circuits within a 74xx circuit.</string>
    <string name="menu_removePrefix">Remove IO-Prefix</string>
    <string name="menu_removePrefix_tt">The first character from the inputs and outputs labels are removed.
        Is used to simplify the doubling of circuits within a 74xx circuit.</string>
    <string name="menu_numbering">Pin Wizard</string>
    <string name="menu_numbering_tt">Wizard to apply pin numbers to the inputs and outputs.</string>
    <string name="menu_removePinNumbers">Remove Pin Numbers</string>
    <string name="menu_removePinNumbers_tt">Remove all pin numbers in the circuit</string>
    <string name="msg_pin_numbering_N">Select pin {0}:</string>

    <string name="menu_undo">Undo</string>
    <string name="menu_undo_tt">Revert last modification</string>
    <string name="menu_redo">Redo</string>
    <string name="menu_redo_tt">Apply last reverted modification again.</string>
    <string name="menu_showDataAsGraph">Show graph</string>
    <string name="menu_showDataAsGraph_tt">Show the data as a Graph.</string>
    <string name="menu_showDataAsTable">Show table</string>
    <string name="menu_showDataAsTable_tt">Shows values as a table.</string>
    <string name="menu_addPowerSupply">Add power supply</string>
    <string name="menu_addPowerSupply_tt">Adds a power supply to the circuit.</string>
    <string name="menu_exportVHDL">Export to VHDL</string>
    <string name="menu_exportVHDL_tt">Exports the circuit to VHDL</string>
    <string name="menu_exportVerilog">Export to Verilog</string>
    <string name="menu_exportVerilog_tt">Exports the circuit to Verilog</string>
    <string name="menu_pdfDocumentation">Documentation</string>
    <string name="menu_openPdfDocumentation">Open {0}</string>
    <string name="msg_errorOpeningDocumentation">Error opening a PDF file!</string>

    <string name="menu_showDataGraph">Show measurement graph</string>
    <string name="menu_showDataGraph_tt">Shows a graph with the measured values in a separate window.</string>
    <string name="menu_showDataTable">Show measurement value table</string>
    <string name="menu_showDataTable_tt">Show table with the measured values in a separate window.</string>
    <string name="menu_exportZIP">Export tos ZIP file</string>
    <string name="menu_exportZIP_tt">Exports the circuit as a ZIP file.
        The ZIP file thus contains all the files that are necessary for the operation of the circuit.</string>
    <string name="menu_labelPins">Label Inputs and Outputs</string>
    <string name="menu_labelPins_tt">Set a label to all inputs and outputs without a label.</string>


    <string name="message">&lt;h1&gt;Digital&lt;/h1&gt;A simple simulator for digital circuits.
        Written by H. Neemann in 2016-2018.

        The icons are taken from the &lt;a href=&quot;http://tango.freedesktop.org&quot;&gt;Tango Desktop Project&lt;/a&gt;.

        Visit the project at &lt;a href=&quot;https://github.com/hneemann/[[name]]&quot;&gt;GitHub&lt;/a&gt;.
        At Github you can also &lt;a href=&quot;https://github.com/hneemann/[[name]]/releases/latest&quot;&gt;download&lt;/a&gt; the latest release.

        There you also can file an &lt;a href=&quot;https://github.com/hneemann/[[name]]/issues/new?body=version:%20[[version]]&amp;labels=bug&quot;&gt;issue&lt;/a&gt; or suggest
        an &lt;a href=&quot;https://github.com/hneemann/[[name]]/issues/new?labels=enhancement&quot;&gt;enhancement&lt;/a&gt;.
    </string>
    <string name="msg_N_nodes">{0} nodes</string>
    <string name="msg_analyseErr">Error analysing the circuit</string>
    <string name="msg_clockError">Error during a clock state change</string>
    <string name="msg_color">Color</string>
    <string name="msg_errorCalculatingStep">Error calculating a step</string>
    <string name="msg_errorCreatingModel">Error creating the circuit</string>
    <string name="msg_errorDuringCalculation">Error during simplification</string>
    <string name="msg_errorDuringHardwareExport">Error during creation of hardware configuration.</string>
    <string name="msg_errorEditingValue">Error editing a attribute value</string>
    <string name="msg_errorImportingModel_N0">Error importing the circuit {0}!</string>
    <string name="msg_errorUpdatingLibrary">Error updating the component library!!</string>
    <string name="msg_errorReadingFile">Error reading a file</string>
    <string name="msg_errorWritingFile">Error writing a file</string>
    <string name="msg_fastRunError">Error at fast run</string>
    <string name="msg_frequency_N">The maximum frequency is {0} kHz</string>
    <string name="msg_missingShape_N">Shape {0} is missing</string>
    <string name="msg_pins">Pin assignment</string>
    <string name="msg_pinMap_pin_N_is_N">Pin {0}: {1}</string>
    <string name="msg_restartNeeded">A restart is required for the changes to take effect!</string>
    <string name="msg_remoteUnknownCommand">Command {0} unknown!</string>
    <string name="msg_enterAnExpression">Enter an expression:</string>
    <string name="msg_runningTestError">Error running the tests:</string>
    <string name="msg_testResult">Test result</string>
    <string name="msg_test_N_Passed">{0} passed</string>
    <string name="msg_test_N_Failed">{0} failed</string>
    <string name="msg_testExp_N0_found_N1">E: {0} / F: {1}</string>
    <string name="msg_creatingHelp">Error creating the help!</string>
    <string name="msg_clipboardContainsNoImportableData">The clipboard contains no importable data!</string>
    <string name="msg_selectAnEmptyFolder">Select an empty folder!</string>
    <string name="msg_errorWhileExecutingTests_N0">During the execution of the tests {0} an error has occurred!</string>
    <string name="msg_fitterResult">Message from the external fitter</string>
    <string name="msg_startExternalFitter">Execution of external fitter</string>
    <string name="msg_actualCircuit">Actual Circuit</string>
    <string name="msg_fileNotAccessible">The selected file name is not importable from the actual project!</string>
    <string name="msg_fileIsNotUnique">The file name is not unique!
        All files in the working directory and all subdirectories must have unique file names. This also applies to the
        library folder. If your work directory has a 7400.dig file, you can not use this file or the 7400.dig file from
        the library.
        If there is a 7400.dig file in your working directory, you can not use this file or the 7400.dig file from the
        library, because this file name can no longer be uniquely assigned.
    </string>
    <string name="msg_duplicateLibraryFiles">There are several files with identical file names, which can not be
        uniquely assigned! Affected are:</string>
    <string name="msg_and_N_More">and {0} more.</string>
    <string name="msg_fileNotImportedYet">The file has not yet been imported.</string>
    <string name="msg_fileExists">The file {0} already exists! Do you want to overwrite the file?</string>
    <string name="msg_test_missingLines">(To many entries!)</string>
    <string name="msg_test_missingLines_tt">All test cases are executed, but not all results are shown.
        The evaluation of the test result is nevertheless correct!</string>
    <string name="msg_isLocked">The editing of the circuit is disabled. You can remove the lock at
        "{0} -> {1} -> {2}".
        However, copying of components and the configuration of diodes and FG-FETs with the [P] key is also possible in the locked mode.</string>
    <string name="msg_speedTestError">Error during speed test!</string>
    <string name="msg_pin_N">Pin {0}</string>
    <string name="msg_numberingWizard">Numbering Wizard</string>
    <string name="msg_framesWritten_N">Written frames: {0}</string>
    <string name="msg_errorWritingGif">Error writing to GIF file!</string>
    <string name="btn_gifComplete">Ready</string>
    <string name="btn_gifComplete_tt">The GIF file is finalized and closed.</string>
    <string name="msg_gifExport">GIF Export</string>
    <string name="msg_errCausedBy">caused by</string>
    <string name="msg_inputsToInvert">Inputs to invert</string>
    <string name="msg_none">none</string>
    <string name="msg_errGettingPinNames">Could not determine the names of the pins.</string>
    <string name="msg_errInFile_N">Occurred in file {0}.</string>
    <string name="msg_affectedComponentsAre_N">Affected are: {0}.</string>
    <string name="msg_signal_N">Signal {0}</string>
    <string name="msg_invalidSignalsAnalysed">To perform an analysis of the circuit, all inputs and outputs
        must be uniquely named!</string>
    <string name="msg_thereAreMissingPinNumbers">No pin numbers assigned to the pins {0}!
        Free pins are automatically assigned. The circuit can therefore not be used on real hardware in most cases!</string>
    <string name="msg_modelHasErrors">You can only export a circuit without errors!</string>
    <string name="msg_noKVMapAvailable">No KV map available!</string>
    <string name="msg_dataNotUpdatedAnymore">Data will not be updated anymore!</string>
    <string name="msg_modifyThisAttribute">Modify this Value</string>
    <string name="msg_invalidEditorValue">On of the fields contains a invalid value!</string>
    <string name="msg_create CHNFile">Creation of CHN file.</string>
    <string name="msg_tableHasManyRowsConfirm">The table is very large, the export may take a while.
        Start export anyway?</string>
    <string name="msg_circuitIsRequired">To create a hardware description, a circuit must first be created and analyzed.
        A standalone truth table can not be used to generate a hardware description.</string>
    <string name="win_romDialog">Included ROM's</string>
    <string name="msg_noData">no data</string>

    <string name="msg_errorClosingExternalProcess">Could not close external process!</string>

    <string name="msg_checkResult">Check Resukt:</string>
    <string name="btn_checkCode">Check</string>
    <string name="btn_checkCode_tt">Starts the application to check if the entered code is correct.
        If this is not the case, the error message of the external application is displayed.
        If possible, the input and output definitions are also adapted to the current code.</string>
    <string name="msg_applicationFileNotFound">Executable file "{0}" not found!</string>
    <string name="msg_enterText">Enter Text!</string>

    <string name="btn_startATMISP">Start ATMISP</string>
    <string name="btn_startATMISP_tt">Starts the external program ATMISP. This must have been previously installed.</string>
    <string name="msg_errorStartingATMISP">Error while starting ATMISP!
Is the correct path to the executable ATMISP.exe specified in the settings?</string>
    <string name="msg_ATMISPIsStillRunning">ATMISP is still running!
When this dialog is closed, ATMISP is terminated!
Make sure the flash process is complete before closing this dialog!</string>

    <string name="menu_runAllTests">Run all Tests</string>
    <string name="menu_runAllTests_tt">Executes all tests in the current folder.</string>
    <string name="msg_testPassed_N">{0} test rows passed</string>
    <string name="msg_testFile">File Tested</string>
    <string name="msg_truthTable">Truth Table</string>
    <string name="msg_errorImportingSvg">Error while importing the SVG file.</string>
    <string name="msg_errorCreatingSvgTemplate">Error creating the SVG template.</string>

    <string name="ok">OK</string>
    <string name="rot_0">0°</string>
    <string name="rot_180">180°</string>
    <string name="rot_270">270°</string>
    <string name="rot_90">90°</string>
    <string name="stat_clocks">{0} half cycles</string>
    <string name="tt_deleteItem">Deletes the selected item</string>
    <string name="tt_moveItemDown">Move the item down</string>
    <string name="tt_moveItemUp">Move the item up</string>
    <string name="win_allSolutions">All possible solutions</string>
    <string name="win_confirmExit">Confirm Exit!</string>
    <string name="win_measures">Measurements</string>
    <string name="win_measures_fullstep">Measurements full clock step</string>
    <string name="win_measures_microstep">Measurements single gate step</string>
    <string name="win_saveChanges">Save Changes?</string>
    <string name="win_stateChanged">State Changed!</string>
    <string name="win_table">Table</string>
    <string name="win_table_exportDialog">Export</string>
    <string name="win_itempicker_title">Select</string>
    <string name="win_testdata_N">Testdata {0}</string>
    <string name="win_data">Data</string>
    <string name="win_valueInputTitle_N">Input {0}</string>
    <string name="win_karnaughMap">Karnaugh Map</string>

    <string name="btn_help">Help</string>

    <string name="win_romDialogHelpTitle">Central ROM Content</string>
    <string name="msg_romDialogHelp"><![CDATA[
        <html>
        <h3>Motivation</h3>
        When a circuit containing a ROM component is embedded multiple times, the contents of the ROM
        is normally used for each instance of that circuit. Under certain circumstances,
        however, it may be desirable for such a circuit to be embedded multiple times,
        but different ROM contents are used for each instance.<br/>
        This problem occurs e.g. if a 74xx ROM is used multiple times but with different
        memory contents.<br/>
        <h3>Function</h3>
        At this location, therefore, contents can be defined for all ROM's in the circuit.
        When the simulation model is generated, every ROM is initialized with the contents stored
        directly in the respective ROM. Then it is checked whether an alternative content is
        defined here. If this is the case, the content defined here is loaded into the corresponding ROM.
        <h3>Usage</h3>
        It should be noted that each ROM requires a unique name used to identify the ROM.
        To do this, use the asterisk ('*') in the label of the ROM. The asterisk is then replaced by the complete
        path constructed from the names of the embedded circuits.
        If a circuit contains only one ROM component, it is sufficient to use only the asterisk as a label for it.
        All embedded circuits must be named so that a unique name can be formed for each ROM component.
        </html>
        ]]>
    </string>

    <string name="msg_newRelease_N"><![CDATA[
        <html>
        <h1>New Version {0} Available</h1>
        <p>There is a new release of the simulator available.</p>
        <p>In the <a href="https://github.com/hneemann/[[name]]/releases/latest">release notes</a>
        you can find the changes and improvements.</p>
        <p>Here you can <a href="https://github.com/hneemann/[[name]]/releases/latest">download</a> the new release.</p>
        </html>
    ]]></string>

    <string name="msg_expressionHelpTitle">Expressions</string>
    <string name="msg_expressionHelp">To define an expression you can use all most common notations:

        And: &quot;&amp;&quot;, &quot;&amp;&amp;&quot;, &quot;*&quot;, &quot;∧&quot;
        Or: &quot;|&quot;, &quot;||&quot;, &quot;+&quot;, &quot;∨&quot;, &quot;#&quot;
        XOr: &quot;^&quot;, &quot;⊻&quot;
        Not: &quot;!&quot;, &quot;~&quot;, &quot;&#172;&quot;

        As usual AND precedes OR and XOr.

        Multiple expressions can be separated by "," or ";".
        If you want to name the expressions you can use the
        let-command: "let U=A+B, let V=A*B"</string>
    <string name="msg_testVectorHelpTitle">Test vectors</string>
    <string name="msg_testVectorHelp"><![CDATA[<html>
    <head><style>pre { background-color: #E0E0E0;}</style></head>
    <body>
<p>The first line has to contain the names of inputs and outputs.
The following lines contain the expected values.
A 'X' represents a don't care, and a 'Z' represents a high Z value.
If a 'C' is used, at first all other values are set, after that a clock cycle is performed and than the
values are compared. So it's easier to test sequential logic.
A line which starts with a number sign ('#') is a comment.</p>

<p>So a test for a 2-bit counter could look like this:</p>

<pre>
C Q1 Q0
0 0  0
C 0  1
C 1  0
C 1  1
C 0  0
</pre>

<p>The tests are executed by Run->Run Tests.</p>
<p>
To make it easier to create a lot of test vectors there is the 'repeat([n])' statement:
If a line begins with 'repeat([n])', [n] test lines are generated. The
Variable 'n' can be used to generate the test data. With 'repeat(16)'
16 lines are created, where n goes from 0 to 15. If there are multiple bit inputs,
and these are to be set together to a binary value, this can be done with the
'bits([bits], [value])' statement. This is used to create [bits] bits of the value [value].</p>

<p>The following is an example that tests a 4-bit adder:</p>

<pre>
           C_i-1  A_3 A_2 A_1 A_0  B_3 B_2 B_1 B_0  C_i S_3 S_2 S_1 S_0
repeat(256)  0    bits(4,n>>4)     bits(4,n)        bits(5,(n>>4)+(n&15))
repeat(256)  1    bits(4,n>>4)     bits(4,n)        bits(5,(n>>4)+(n&15)+1)
</pre>

<p>The input signals are the carry-in (C_i-1) and the eight input bits A_3-A_0 and B_3-B_0.
The 4 input bits are generated with the 'bits' instruction. The result (C_i, S_3-S_0) is also generated
by a 'bits' instruction.
This happens once with C_i-1 = 0 and in the next line with C_i-1 = 1.
In this way, 512 test rows are generated which cover all possible input configurations.</p>
<p>If multiple rows are to be repeated, or if nested loops are required, the loop
statement can be used. The above example could also be implemented as follows:</p>

<pre>
           C_i-1  A_3 A_2 A_1 A_0  B_3 B_2 B_1 B_0  C_i S_3 S_2 S_1 S_0
loop(a,16)
  loop(b,16)
             0    bits(4,a)        bits(4,b)        bits(5,a+b)
             1    bits(4,a)        bits(4,b)        bits(5,a+b+1)
  end loop
end loop
</pre>

<p>It may be helpful to generate random numbers in test cases.
These can be created with the function 'random([n])'. The generated number is greater
than or equal to zero and less than [n]. Considering a 16-bit multiplier as an example,
a full test can not be performed since it would have 2^32 input combinations.
A regression test that multiplies 100000 random numbers might look like this:</p>

<pre>
   A    B      Y
loop(i,100000)
  let a = random(1&lt;&lt;16);
  let b = random(1&lt;&lt;16);
  (a)  (b)   (a*b)
end loop
</pre>

<p>An input that allows high impedance as a value can also be used as a test output.
In this case, the signal name can be used with a trailing "_out" to read back and check the current value.
For this, the corresponding input must be set to high impedance ('Z').</p>

<pre>OE CLK D D_out
0   0  0 0
0   C  1 1
1   0  z 1
0   C  0 0
1   0  z 0
</pre>

<p>The circuit for this test has only one input 'D', but which can be high impedance state.
Therefore, the signal 'D_out' is also available to check the value in this case.</p>

</body></html>]]></string>

    <string name="fsm_title">Finite State Machine</string>
    <string name="fsm_noMove">no movement</string>
    <string name="fsm_moveTrans">Transitions</string>
    <string name="fsm_moveStates">Transitions+States</string>
    <string name="fsm_set_N">set {0}</string>
    <string name="menu_fsm">Finite State Machine</string>
    <string name="menu_fsm_tt">Opens a Dialog to Edit a Finite State Machine.</string>
    <string name="menu_fsm_create">Create</string>
    <string name="menu_fsm_create_table">State Transition Table</string>
    <string name="menu_fsm_create_counter">Create Counter</string>
    <string name="menu_fsm_create_counter_N">{0} States</string>
    <string name="err_notDeterministic_N">The FSM is not deterministic: {0}</string>
    <string name="err_fsmNumberUsedTwice_N">State Number {0} used twice.</string>
    <string name="err_fsmNoInitialState">There is no initial state (state number zero).</string>
    <string name="err_fsmState_N_notFound">State ''{0}'' not found!</string>
    <string name="err_fsmInvalidOutputAssignment_N">Wrong  assignment to output (''{0}'')!</string>
    <string name="err_fsmErrorInCondition_N">Error in condition ''{0}''!</string>
    <string name="key_stateNum">State Number</string>
    <string name="key_stateNum_tt">The number which represents this state.</string>
    <string name="key_stateValues">Outputs</string>
    <string name="key_stateValues_tt">Defines the output values. If nothing is specified, all values are set to zero.
        With simple assignments like "A=1, B=0" outputs can be set.
    </string>
    <string name="key_transCond">Condition</string>
    <string name="key_transCond_tt">A boolean expression.</string>
    <string name="key_transRad">Radius</string>
    <string name="key_transRad_tt">Radius of the circle in the diagram.</string>
    <string name="msg_fsmCantCreateTable">Can not create state transition table.</string>
    <string name="msg_fsmNewState">New State</string>
    <string name="msg_fsm_errorLoadingFile">Error loading a file!</string>
    <string name="msg_fsm_errorStoringFile">Error storing a file!</string>

</resources>