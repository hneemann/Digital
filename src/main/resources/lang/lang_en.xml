<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="addr">Address</string>
    <string name="name">Name</string>
    <string name="tableOfContent">Table of Contents</string>
    <string name="general">General</string>
    <string name="revision">Revision</string>
    <string name="date">Date</string>
    <string name="number">No.</string>
    <string name="attr_dialogTitle">Attributes</string>
    <string name="attr_openCircuit">Show</string>
    <string name="attr_openCircuitLabel">Included circuit:</string>
    <string name="attr_openCircuit_tt">Opens the circuit in a new window.</string>
    <string name="attr_help">Help</string>
    <string name="attr_help_tt">Shows a short description of this element.</string>
    <string name="attr_dialogHex">Hex</string>
    <string name="attr_dialogDecimal">Decimal</string>
    <string name="attr_dialogAscii">Ascii</string>
    <string name="attr_dialogHighz">HighZ</string>
    <string name="attr_dialogOctal">Octal</string>
    <string name="attr_dialogBinary">Binary</string>
    <string name="btn_discard">Discard Changes</string>
    <string name="btn_edit">Edit</string>
    <string name="btn_editFurther">Continue editing</string>
    <string name="btn_load">Load</string>
    <string name="btn_reload">Reload</string>
    <string name="btn_reload_tt">Reload last hex file</string>
    <string name="btn_save">Save</string>
    <string name="btn_create">Create</string>
    <string name="btn_create_tt">Create a circuit in a separate window</string>
    <string name="btn_editDetached">Edit detached</string>
    <string name="btn_editDetached_tt">Opens the dialog as a non modal dialog</string>
    <string name="btn_openInBrowser">Browser</string>
    <string name="btn_openInBrowser_tt">Opens help text in the browser. Allows to print the text.</string>
    <string name="btn_clearData">Clear</string>
    <string name="btn_clearData_tt">All values are set to zero!</string>
    <string name="btn_addTransitions">Transitions</string>
    <string name="btn_addTransitions_tt">All possible transitions are added as test cases. Is used to create test cases to test the simulator itself.</string>
    <string name="btn_newName">New Name</string>
    <string name="btn_saveAnyway">Save anyway</string>
    <string name="btn_overwrite">Overwrite</string>
    <string name="btn_apply">Apply</string>
    <string name="msg_warning">Warning</string>
    <string name="cancel">Cancel</string>
    <string name="digital">Digital</string>
    <string name="expression">Expression</string>
    <string name="elem_Help_inputs">Inputs</string>
    <string name="elem_Help_outputs">Outputs</string>
    <string name="elem_Help_attributes">Attributes</string>
    <string name="elem_Add">Add</string>
    <string name="elem_Add_tt">A component for simple add calculations. Adds the two integer values from input a and input b (a+b). The result will be incremented by one if the carry input is set. </string>
    <string name="elem_Add_pin_a">First input to add.</string>
    <string name="elem_Add_pin_b">Second input to add.</string>
    <string name="elem_Add_pin_c_i">Carry input, if set the result is incremented by one.</string>
    <string name="elem_Add_pin_s">The result of the addition</string>
    <string name="elem_Add_pin_c_o">If set there was an overflow.</string>
    <string name="elem_BitCount">Bit counter</string>
    <string name="elem_BitCount_tt">Returns the number of 1-bits in the input value.</string>
    <string name="elem_BitCount_pin_in">The input which 1-bits are counted.</string>
    <string name="elem_BitCount_pin_out">Outputs the number of 1-bits.</string>
    <string name="elem_And">And</string>
    <string name="elem_And_tt">Binary AND gate. Returns high only if all inputs are also set high.</string>
    <string name="elem_Basic_In">The {0}. input value for the logic operation.</string>
    <string name="elem_Basic_Out">Returns the result of the logic operation.</string>
    <string name="elem_Break">Break</string>
    <string name="elem_Break_pin_brk">Stops fast simulation if set to 1.</string>
    <string name="elem_Break_tt">If the input of this component becomes high, the fast forward clocking is stopped.
        You can use the component to implement a BRK assembly instruction.
        Then you can run a simulated processor until a BRK instruction is reached.</string>
    <string name="elem_Button">Button</string>
    <string name="elem_Button_tt">A simple button which resets back to its original state when not held down.</string>
    <string name="elem_Button_pin_out">The output signal of the button.</string>
    <string name="elem_Clock">Clock Input</string>
    <string name="elem_Clock_pin_C">Alternates 0 and 1 with the set clock speed.</string>
    <string name="elem_Clock_tt">A clock signal. Its possible to control it by the real time clock. Clock speed (in Hz) can be set in attributes dialog.</string>
    <string name="elem_Comparator">Comparator</string>
    <string name="elem_Comparator_tt">A component for comparing bit values. Compares the binary numbers on input pin a and input pin b and sets the corresponding outputs.</string>
    <string name="elem_Comparator_pin_a">Input a to compare.</string>
    <string name="elem_Comparator_pin_b">Input b to compare.</string>
    <string name="elem_Comparator_pin_=">Output is 1 if input a equals input b</string>
    <string name="elem_Comparator_pin_&gt;">Output is 1 if input a is greater then input b</string>
    <string name="elem_Comparator_pin_&lt;">Output is 1 if input a is less then input b</string>
    <string name="elem_Const">Constant value</string>
    <string name="elem_Const_pin_out">Returns the given value as a constant.</string>
    <string name="elem_Const_tt">A component which returns a given value as a simple constant value. The value can be set in the attributes dialog.</string>
    <string name="elem_Ground">Ground</string>
    <string name="elem_Ground_tt">A connection to ground. Output is always zero.</string>
    <string name="elem_Ground_pin_out">Output always returns 0.</string>
    <string name="elem_VDD">Supply voltage</string>
    <string name="elem_VDD_tt">A connection to the supply voltage. Output is always one.</string>
    <string name="elem_VDD_pin_out">This output always returns 1.</string>
    <string name="elem_Tunnel">Tunnel</string>
    <string name="elem_Tunnel_tt">Connects parts without a wire. All tunnel elements, which have the same net name,
        are connected together. Works only local, so it is not possible to connect different circuits.</string>
    <string name="elem_Tunnel_pin_in">The connection to the tunnel.</string>

    <string name="elem_Relay">Relay</string>
    <string name="elem_Relay_tt">A relay is a switch which can be controlled by a coil.
        If a current flows through the coil, the switch is closed or opened.
        There is no flyback diode so the current direction does not matter.</string>
    <string name="elem_Relay_pin_in1">On of the inputs to control the relay.</string>
    <string name="elem_Relay_pin_in2">On of the inputs to control the relay.</string>
    <string name="elem_Relay_pin_out1">One of the switch outputs.</string>
    <string name="elem_Relay_pin_out2">One of the switch outputs.</string>

    <string name="elem_Switch">Switch</string>
    <string name="elem_Switch_tt">Simple switch.
        There is no gate delay: A signal change is propagated immediately.</string>
    <string name="elem_Switch_pin_out1">One of the switch outputs.</string>
    <string name="elem_Switch_pin_out2">One of the switch outputs.</string>

    <string name="elem_Fuse">Fuse</string>
    <string name="elem_Fuse_tt">A fuse used to build a one time programmable memory.</string>
    <string name="elem_Fuse_pin_out1">One of the fuse outputs.</string>
    <string name="elem_Fuse_pin_out2">One of the fuse outputs.</string>

    <string name="elem_Counter">Counter</string>
    <string name="elem_Counter_tt">A simple counter component. The clock input increases the counter. Can be reset back to 0 with the clr pin.
        The number of bits can be set in the attribute dialog.</string>
    <string name="elem_Counter_pin_C">The clock input. A rising edge increases the counter.</string>
    <string name="elem_Counter_pin_clr">Resets the counter value if set to 1.</string>
    <string name="elem_Counter_pin_out">Returns the counted value.</string>
    <string name="elem_Counter_pin_ovf">Overflow output. This pin is set to 1 if the counter has an overflow and returns to zero.</string>

    <string name="elem_D_FF">D-FlipFlop</string>
    <string name="elem_D_FF_short">D</string>
    <string name="elem_D_FF_tt">A component used to save two states (one bit). The bit on pin D is stored on a rising edge of pin C.</string>
    <string name="elem_D_FF_pin_D">Input of the bit to be stored.</string>
    <string name="elem_D_FF_pin_C">Control pin to store a bit. The bit on input D is stored on a rising edge of this pin.</string>
    <string name="elem_D_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_D_FF_pin_¬Q">Returns the negated stored value.</string>

    <string name="elem_D_FF_AS">D-FlipFlop, asynchronous</string>
    <string name="elem_D_FF_AS_short">D-AS</string>
    <string name="elem_D_FF_AS_tt">A component used to save two states (one bit). The bit on pin D is stored on a rising edge of pin C.</string>
    <string name="elem_D_FF_AS_pin_D">Input of the bit to be stored.</string>
    <string name="elem_D_FF_AS_pin_C">Control pin to store a bit. The bit on input D is stored on a rising edge of this pin.</string>
    <string name="elem_D_FF_AS_pin_Q">Returns the stored value.</string>
    <string name="elem_D_FF_AS_pin_¬Q">Returns the negated stored value.</string>
    <string name="elem_D_FF_AS_pin_Set">asynchronous set</string>
    <string name="elem_D_FF_AS_pin_Clr">asynchronous clear</string>

    <string name="elem_Data">Data graph</string>
    <string name="elem_Data_tt">Shows a data plot inside of the circuit panel.
        You can plot complete clock steps or single gate changes.</string>
    <string name="elem_Decoder_pin_sel">This input selects the enabled output. The selected output is set to 1. All other outputs are set to 0.</string>
    <string name="elem_Decoder">Decoder</string>
    <string name="elem_Decoder_output">Output {0}. This output is 1 if selected by the sel input.</string>
    <string name="elem_Decoder_tt">One selectable output line is 1, all other outputs are set to 0.</string>
    <string name="elem_Delay">Delay</string>
    <string name="elem_Delay_pin_in">Input of the signal to be delayed.</string>
    <string name="elem_Delay_pin_out">Delays the signal by one gate delay</string>
    <string name="elem_Delay_tt">Delays the signal by on gate delay</string>
    <string name="elem_Demultiplexer">Demultiplexer</string>
    <string name="elem_Demultiplexer_tt">A component witch can output the input value to one of the outputs.
        The other outputs are set to the default value.</string>
    <string name="elem_Demultiplexer_pin_sel">This pin selects the output to use.</string>
    <string name="elem_Demultiplexer_pin_in">The value of this input is given to the selected output.</string>
    <string name="elem_Demultiplexer_output">Output {0}.</string>
    <string name="elem_Driver">Driver</string>
    <string name="elem_Driver_tt">A driver can be used to connect a signal value to another line.
        The driver is controlled by the sel input. If the sel input is low, the output is in high z state.</string>
    <string name="elem_Driver_pin_in">The input value of the driver.</string>
    <string name="elem_Driver_pin_sel">Pin to control the driver. If its value is 1 the input is given to the output. If the value is 0, the output is in high z state.</string>
    <string name="elem_Driver_pin_out">If the sel input is 1 the input is given to this output. If the sel input is 0, this output is in high z state.</string>
    <string name="elem_DriverInvSel">Driver, inverted select</string>
    <string name="elem_DriverInvSel_tt">A driver can be used to connect a data word to another line.
        The driver is controlled by the sel input.</string>
    <string name="elem_DriverInvSel_pin_in">The input value of the driver.</string>
    <string name="elem_DriverInvSel_pin_sel">Pin to control the driver. If its value is 0 the input is given to the output. If the value is 1, the output is in high z state.</string>
    <string name="elem_DriverInvSel_pin_out">If the sel input is 0 the input is given to this output. If the sel input is 1, this output is in high z state.</string>
    <string name="elem_In">Input</string>
    <string name="elem_In_pin_out">This connection outputs the given value.</string>
    <string name="elem_In_tt">A input which can be used to connect the circuit if it is included in an other circuit.</string>

    <string name="elem_JK_FF">JK-Flipflop</string>
    <string name="elem_JK_FF_short">JK</string>
    <string name="elem_JK_FF_tt">Has the possibility to store (J=K=0), set (J=1, K=0), reset (J=0, K=1) or toggle (J=K=1) the stored value. The input values act with a rising edge at input C.</string>
    <string name="elem_JK_FF_pin_J">The set input of the flipflop.</string>
    <string name="elem_JK_FF_pin_C">The Clock input. A rising edge initiates a state change.</string>
    <string name="elem_JK_FF_pin_K">The reset input of the flipflop.</string>
    <string name="elem_JK_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_JK_FF_pin_¬Q">Returns the negated stored value.</string>

    <string name="elem_JK_FF_AS">JK-Flipflop, asynchronous</string>
    <string name="elem_JK_FF_AS_short">JK-AS</string>
    <string name="elem_JK_FF_AS_tt">Has the possibility to store (J=K=0), set (J=1, K=0), reset (J=0, K=1) or toggle (J=K=1) the stored value. The input values act with a rising edge at input C.</string>
    <string name="elem_JK_FF_AS_pin_J">The set input of the flipflop.</string>
    <string name="elem_JK_FF_AS_pin_C">The Clock input. A rising edge initiates a state change.</string>
    <string name="elem_JK_FF_AS_pin_K">The reset input of the flipflop.</string>
    <string name="elem_JK_FF_AS_pin_Q">Returns the stored value.</string>
    <string name="elem_JK_FF_AS_pin_¬Q">Returns the negated stored value.</string>
    <string name="elem_JK_FF_AS_pin_Set">asynchronous set</string>
    <string name="elem_JK_FF_AS_pin_Clr">asynchronous clear</string>

    <string name="elem_LED">LED</string>
    <string name="elem_LED_tt">A simple LED can be used to visualize an output value. Accepts a single bit. Lights up when the input is set to 1.</string>
    <string name="elem_LED_pin_in">LED Input. LED shines when input is set to 1.</string>
    <string name="elem_LookUpTable">LookUpTable</string>
    <string name="elem_LookUpTable_short">LUT</string>
    <string name="elem_LookUpTable_pin_in">Input {0}. This input in combination with all other inputs define the address of the stored value to be returned.</string>
    <string name="elem_LookUpTable_pin_out">Returns the stored value at the address set via the inputs.</string>
    <string name="elem_LookUpTable_tt">Gets the output value from a stored table.
        So this gate can emulate every combinatorial gate.
        The configuration of the LookUpTable like number of bits or number of inputs can be set up in the attributes dialog.</string>
    <string name="elem_Mul">Mul</string>
    <string name="elem_Mul_tt">A component for multiplication. Multiplies the integer numbers on input pin a and input pin b.</string>
    <string name="elem_Mul_pin_a">Input a for multiplication.</string>
    <string name="elem_Mul_pin_b">Input b for multiplication.</string>
    <string name="elem_Mul_pin_mul">Output for the result of the multiplication.</string>
    <string name="elem_BarrelShifter">Shift</string>
    <string name="elem_BarrelShifter_tt">A component for bit shifting. Shift input in by the value defined from input shift.</string>
    <string name="elem_BarrelShifter_pin_in">Input with bits to be shifted.</string>    
    <string name="elem_BarrelShifter_pin_shift">Input with shift width.</string>    
    <string name="elem_BarrelShifter_pin_out">Output with shifted value.</string>    
    <string name="elem_Multiplexer">Multiplexer</string>
    <string name="elem_Multiplexer_input">The {0}. input of the multiplexer.</string>
    <string name="elem_Multiplexer_output">The value of the selected input.</string>
    <string name="elem_Multiplexer_pin_sel">This pin selects the input which value is to output.</string>
    <string name="elem_Multiplexer_tt">A component which uses the value of the sel pin to decide which input value is set to the output.</string>
    <string name="elem_NAnd">NAnd</string>
    <string name="elem_NAnd_tt">A combination of AND and NOT. Returns 0 only if all inputs are set to 1. If on of the inputs is set to 0 the output is set to 1.</string>
    <string name="elem_NOr">NOr</string>
    <string name="elem_NOr_tt">A combination of OR and NOT. Returns a 0 if one of the inputs is set to 1. If all inputs are set to 0 the output is also set to 1.</string>
    <string name="elem_Not">Not</string>
    <string name="elem_Not_tt">Returns the negated value. A 1 becomes a 0 and a 0 becomes 1.</string>
    <string name="elem_Not_pin_in">The input of the NOT gate.</string>
    <string name="elem_Not_pin_out">Returns the negated value of the input value. All bits are inverted.</string>
    <string name="elem_Neg">Negation</string>
    <string name="elem_Neg_pin_in">Input of the data word to be negated in 2th complement</string>
    <string name="elem_Neg_pin_out">Returns the result of the negation in 2th complement.</string>
    <string name="elem_Neg_tt">Negation in the 2th complement</string>
    <string name="elem_Or">Or</string>
    <string name="elem_Or_tt">Binary OR gate. Returns a 1 if one of the inputs is set to 1. If all inputs are set to 0 the output is also set to 0.</string>
    <string name="elem_Out">Out</string>
    <string name="elem_Out_tt">A output which can be used to connect the circuit if it is included in an other circuit.</string>
    <string name="elem_Out_pin_in">This value is used for te output connection.</string>
    <string name="elem_Probe">Probe</string>
    <string name="elem_Probe_tt">A measurement value which can be shown in the data graph.</string>
    <string name="elem_Probe_pin_in">The measurement value.</string>
    <string name="elem_RAMDualPort">RAMDualPort</string>
    <string name="elem_RAMDualPort_short">RAM</string>
    <string name="elem_RAMDualPort_pin_A">The address to read and write</string>
    <string name="elem_RAMDualPort_pin_C">Clock</string>
    <string name="elem_RAMDualPort_pin_D_in">The data to be stored in the RAM</string>
    <string name="elem_RAMDualPort_pin_D">The data output pin</string>
    <string name="elem_RAMDualPort_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_RAMDualPort_pin_str">If this input is high when the clock becomes high, the the data is stored.</string>
    <string name="elem_RAMDualPort_tt">A RAM module with separate inputs for storing and output for reading the stored data.</string>

    <string name="elem_RAMSinglePort">RAMSinglePort</string>
    <string name="elem_RAMSinglePort_short">RAM</string>
    <string name="elem_RAMSinglePort_pin_A">The address to read and write.</string>
    <string name="elem_RAMSinglePort_pin_C">Clock</string>
    <string name="elem_RAMSinglePort_pin_D">The bidirectional data connection.</string>
    <string name="elem_RAMSinglePort_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_RAMSinglePort_pin_str">If this input is high when the clock becomes high, the the data is stored.</string>
    <string name="elem_RAMSinglePort_tt">A RAM module with a bidirectional connection for reading and writing the data.</string>

    <string name="elem_RAMSinglePortSel">RAMSinglePortSel</string>
    <string name="elem_RAMSinglePortSel_short">RAM</string>
    <string name="elem_RAMSinglePortSel_pin_A">The address to read and write.</string>
    <string name="elem_RAMSinglePortSel_pin_WE">If set to high the data is written to the RAM.</string>
    <string name="elem_RAMSinglePortSel_pin_D">The bidirectional data connection.</string>
    <string name="elem_RAMSinglePortSel_pin_CS">If this input is high, this RAM is enabled. Otherwise the output is always in high Z state.</string>
    <string name="elem_RAMSinglePortSel_pin_OE">If this input is high, the stored value is output.</string>
    <string name="elem_RAMSinglePortSel_tt">A RAM module with a bidirectional connection for reading and writing the data.
        The CS input allows to build a larger RAM from some smaller RAMs and a address decoder.</string>

    <string name="elem_GraphicCard">Graphic RAM</string>
    <string name="elem_GraphicCard_tt">Used to show a bitmap graphic. This element works similar to a RAM. In addition it
    shows its content on a graphic screen. Every pixel is represented by a memory address. There are to screens supported
    to implement screen switching (See input B).</string>
    <string name="elem_GraphicCard_pin_A">The address to read and write.</string>
    <string name="elem_GraphicCard_pin_str">If this input is high when the clock becomes high, the the data is stored.</string>
    <string name="elem_GraphicCard_pin_C">Clock</string>
    <string name="elem_GraphicCard_pin_ld">If this input is high the output is activated and the data is visible at the output.</string>
    <string name="elem_GraphicCard_pin_B">Selects the buffer to show</string>
    <string name="elem_GraphicCard_pin_D">The bidirectional data connection.</string>
    <string name="elem_ROM">ROM</string>
    <string name="elem_ROM_tt">A non-volatile memory component.</string>
    <string name="elem_ROM_pin_A">This pin defines the address of data word to be output.</string>
    <string name="elem_ROM_pin_D">The selected data word. Only readable if "select" input is high.</string>
    <string name="elem_ROM_pin_sel">If the input is high, the output is activated. If it is low, the data output is in high Z state.</string>
    <string name="elem_RS_FF">RS-FlipFlop</string>
    <string name="elem_RS_FF_short">RS</string>
    <string name="elem_RS_FF_tt">A component to save a single bit for an undefined duration.
        Provides the functions "set" and "reset" the stored bit.</string>
    <string name="elem_RS_FF_pin_S">The set input.</string>
    <string name="elem_RS_FF_pin_C">The Control input. A rising edge initiates a state transition.</string>
    <string name="elem_RS_FF_pin_R">The reset input.</string>
    <string name="elem_RS_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_RS_FF_pin_¬Q">Returns the negated stored value.</string>
    <string name="elem_Register">Register</string>
    <string name="elem_Register_tt">A component to store integers. The length of the data word can be set in the attributes dialog.</string>
    <string name="elem_Register_pin_D">Input pin of the data word to be stored.</string>
    <string name="elem_Register_pin_C">Clock. A rising edge stores the value at the D pin.</string>
    <string name="elem_Register_pin_en">Enable pin. Storing a value works only if this pin is set high.</string>
    <string name="elem_Register_pin_Q">Returns the stored value.</string>
    <string name="elem_Reset">Reset</string>
    <string name="elem_Reset_pin_Reset">Reset Output. Is zero while the circuit is stabilizing.</string>
    <string name="elem_Reset_tt">The output of this component is held low during the initialisation of the circuit.
        After the circuit has stabilized the output goes to high.</string>
    <string name="elem_Seven-Seg">Seven-Segment Display</string>
    <string name="elem_Seven-Seg_pin_a">This input controls the upper, horizontal line.</string>
    <string name="elem_Seven-Seg_pin_b">This input controls the upper, right, vertical line.</string>
    <string name="elem_Seven-Seg_pin_c">This input controls the lower, right, vertical line.</string>
    <string name="elem_Seven-Seg_pin_d">This input controls the lower horizontal line.</string>
    <string name="elem_Seven-Seg_pin_e">This input controls the lower, left, vertical line.</string>
    <string name="elem_Seven-Seg_pin_f">This input controls the upper, left, vertical line.</string>
    <string name="elem_Seven-Seg_pin_g">This input controls the middle, horizontal line.</string>
    <string name="elem_Seven-Seg_pin_dp">This input controls the decimal point.</string>
    <string name="elem_Seven-Seg_pin_cc">Common Cathode. To turn on the LEDs, this input needs to be low.</string>
    <string name="elem_Seven-Seg-Hex">Seven-Segment-Hex Display</string>
    <string name="elem_Seven-Seg-Hex_tt">Seven Segment Display with a 4 bit input</string>
    <string name="elem_Seven-Seg-Hex_pin_d">The value at this input is visualized at the display.</string>
    <string name="elem_Seven-Seg-Hex_pin_dp">This input controls the decimal point.</string>
    <string name="elem_Seven-Seg_tt">Seven Segment Display, every segment has its own input.</string>
    <string name="elem_Splitter">Splitter</string>
    <string name="elem_Splitter_tt">Splits or creates a wire bundle or a data bus with more than one bit.</string>
    <string name="elem_Splitter_pin_in">The input bits {0}.</string>
    <string name="elem_Splitter_pin_in_one">The input bit {0}.</string>
    <string name="elem_Splitter_pin_out">The output bits {0}.</string>
    <string name="elem_Splitter_pin_out_one">The output bit {0}.</string>
    <string name="elem_Sub">Sub</string>
    <string name="elem_Sub_tt">A component for simple subtractions. Subtracts binary numbers on input a and input b (a-b). If the carry input is set to 1 the result is decremented by 1.</string>
    <string name="elem_Sub_pin_c_i">Carry input, if set the result is decremented by one.</string>
    <string name="elem_Sub_pin_a">Input a for subtraction.</string>
    <string name="elem_Sub_pin_b">Input b for subtraction.</string>
    <string name="elem_Sub_pin_s">Output returns the result of the subtraction.</string>
    <string name="elem_Sub_pin_c_o">Output returns 1 if an overflow occurred.</string>
    <string name="elem_T_FF">T-FlipFlop</string>
    <string name="elem_T_FF_short">T</string>
    <string name="elem_T_FF_tt">Stores a single bit. Toggles the state on a rising edge at input C.</string>
    <string name="elem_T_FF_pin_T">Enables the toggle function.</string>
    <string name="elem_T_FF_pin_C">Clock. A rising edge toggles the output, if input T is set to 1.</string>
    <string name="elem_T_FF_pin_Q">Returns the stored value.</string>
    <string name="elem_T_FF_pin_¬Q">Returns the negated stored value.</string>
    <string name="elem_Terminal">Terminal</string>
    <string name="elem_Terminal_pin_C">Clock. A rising edge writes the value at the input to the terminal window.</string>
    <string name="elem_Terminal_pin_D">The data to write to the terminal</string>
    <string name="elem_Terminal_tt">You can write ASCII characters to this terminal.
        The terminal opens its own window to visualize the output.</string>
    <string name="elem_Text">Text</string>
    <string name="elem_Text_tt">Shows a text in the circuit. The text can be changed in the attributes dialog.</string>
    <string name="elem_XNOr">XNOr</string>
    <string name="elem_XNOr_tt">A combination of XOR and NOT. The output is 1 if both input bits are equal.</string>
    <string name="elem_XNOr_pin_a">Input a for Exclusive Not Or.</string>
    <string name="elem_XNOr_pin_b">Input b for Exclusive Not Or.</string>
    <string name="elem_XNOr_pin_out">Returns the result of the XNOr operation.</string>
    <string name="elem_XOr">XOr</string>
    <string name="elem_XOr_tt">The output is 0 if both input bits are equal.</string>
    <string name="elem_XOr_pin_a">Input a for Exclusive Or.</string>
    <string name="elem_XOr_pin_b">Input b for Exclusive Or.</string>
    <string name="elem_XOr_pin_out">Returns result of Exclusive Or.</string>
    <string name="elem_Testcase">Test case</string>
    <string name="elem_Testcase_tt">Describes a test case.
        In a test case you can describe how a circuit should behave. It can then be automatically checked whether the
        behavior of the circuit actually corresponds to this description. If this is not the case, a corresponding
        error message is shown. </string>
    <string name="elem_Keyboard">Keyboard</string>
    <string name="elem_Keyboard_tt">A simple keyboard which can be used to input symbols.</string>
    <string name="elem_Keyboard_pin_sel">If high the output D is active and one keystroke is output.</string>
    <string name="elem_Keyboard_pin_D">The last pressed key, or zero if no key is typed.</string>

    <string name="elem_Diode">Diode</string>
    <string name="elem_Diode_tt">Simplified bidirectional diode. It is used to implement a wired AND or a wired OR..
        This is a ideal diode: There is no voltage drop across a forward-biased diode.</string>
    <string name="elem_DiodeBackward">Diode to Ground</string>
    <string name="elem_DiodeBackward_tt">A simplified unidirectional diode, used to pull a wire to ground. It is used to implement a wired AND.
        So it is necessary to connect a pull up resistor to the diodes output.
        Is the input low, also the output is low. In the other cases (input is high or high z) the output is in high z state.
        So two anti parallel connected diodes can keep each other in low state, which is not possible with real diodes.
        So this is a ideal diode: There is no voltage drop across a forward-biased diode.</string>
    <string name="elem_DiodeBackward_pin_in">If the input is low also the output is low. In all other cases the output is in high z state.</string>
    <string name="elem_DiodeBackward_pin_out">If the input is low also the output is low. In all other cases the output is in high z state.</string>
    <string name="elem_DiodeForward">Diode to VDD</string>
    <string name="elem_DiodeForward_tt">A simplified unidirectional diode, used to pull a wire to VDD. It is used to implement a wired OR.
        So it is necessary to connect a pull down resistor to the diodes output.
        In the simulation the diode behaves like an active gate with a trivalent truth table:
        Is the input high, also the output is high. In all other cases (input is low or high z) the output is in high z state.
        So two anti parallel connected diodes can keep each other in high state, which is not possible with real diodes.
        This is an ideal diode: There is no voltage drop across a forward-biased diode.</string>
    <string name="elem_DiodeForward_pin_in">If the input is high also the output is high. In all other cases the output is in high z state.</string>
    <string name="elem_DiodeForward_pin_out">If the input is high also the output is high. In all other cases the output is in high z state.</string>
    <string name="elem_PullUp">Pull-Up Resistor</string>
    <string name="elem_PullUp_tt">If a net is in a HighZ state, this resistor pulls the net to high. In any other case this component has no effect.</string>
    <string name="elem_PullUp_pin_out">A "weak high".</string>
    <string name="elem_PullDown">Pull-Down Resistor</string>
    <string name="elem_PullDown_tt">If the net is in a HighZ state, this resistor pulls the net to ground. In any other case this component has no effect.</string>
    <string name="elem_PullDown_pin_out">A "weak low".</string>

    <string name="elem_NFET">N-Channel FET</string>
    <string name="elem_NFET_tt">N-Channel Field Effect Transistor. The bulk is connected to ground and the transistor is simulated without a body diode.</string>
    <string name="elem_NFET_pin_G">Gate</string>
    <string name="elem_NFET_pin_S">Source</string>
    <string name="elem_NFET_pin_D">Drain</string>

    <string name="elem_FGNFET">N-Channel floating gate FET</string>
    <string name="elem_FGNFET_tt">N-Channel Floating Gate Field Effect Transistor. The bulk is connected to ground and the transistor is simulated without a body diode.
        If there is a charge stored in the floating gate, the fet isn't conducting even if the gate is high.</string>
    <string name="elem_FGNFET_pin_G">Gate</string>
    <string name="elem_FGNFET_pin_S">Source</string>
    <string name="elem_FGNFET_pin_D">Drain</string>

    <string name="elem_FGPFET">P-Channel floating gate FET</string>
    <string name="elem_FGPFET_tt">P-Channel Floating Gate Field Effect Transistor. The bulk is connected to ground and the transistor is simulated without a body diode.
        If there is a charge stored in the floating gate, the fet isn't conducting even if the gate is low.</string>
    <string name="elem_FGPFET_pin_G">Gate</string>
    <string name="elem_FGPFET_pin_S">Source</string>
    <string name="elem_FGPFET_pin_D">Drain</string>

    <string name="elem_PFET">P-Channel FET</string>
    <string name="elem_PFET_tt">P-Channel Field Effect Transistor. The bulk is connected to the pos. voltage rail and the transistor is simulated without a body diode.</string>
    <string name="elem_PFET_pin_G">Gate</string>
    <string name="elem_PFET_pin_S">Source</string>
    <string name="elem_PFET_pin_D">Drain</string>

    <string name="elem_RotEncoder">Rotary Encoder</string>
    <string name="elem_RotEncoder_tt">Rotary knob with rotary encoder for stateless detecting rotational movements.</string>
    <string name="elem_RotEncoder_pin_A">encoder signal A</string>
    <string name="elem_RotEncoder_pin_B">encoder signal B</string>
    <string name="elem_LedMatrix">LED-Matrix</string>
    <string name="elem_LedMatrix_tt">A matrix of LEDs. The LEDs are shown in a separate window.
        The LEDs are able to light up indefinitely in the simulation to prevent the display from flickering.</string>
    <string name="elem_LedMatrix_pin_r-data">The row state of the LEDs of a column. Each bit in this data word represents the state of a row of the current column.</string>
    <string name="elem_LedMatrix_pin_c-addr">The number of the current column whose state is currently visible at the other input.</string>

    <string name="elem_TransGate">Transmission-Gate</string>
    <string name="elem_TransGate_tt">A real transmission-gate is build from only two transistors.
        Therefore, it is often used to save transistors during implementation on silicon.</string>
    <string name="elem_TransGate_pin_A">input A</string>
    <string name="elem_TransGate_pin_B">input B</string>
    <string name="elem_TransGate_pin_S">control input.</string>
    <string name="elem_TransGate_pin_~S">inverted control input</string>

    <string name="elem_LightBulb">Light Bulb</string>
    <string name="elem_LightBulb_tt">Light bulb with two connections. If a current flows, the bulb lights up!</string>
    <string name="elem_LightBulb_pin_A">Connection</string>
    <string name="elem_LightBulb_pin_B">Connection</string>

    <string name="elem_PowerSupply">Power</string>
    <string name="elem_PowerSupply_tt">Has no function. Makes sure that VDD and GND are connected.
        Can be used in 74xx circuits to generate the pins for the voltage supply, which are tested for correct wiring.</string>
    <string name="elem_PowerSupply_pin_VDD">Must be connected to VDD!</string>
    <string name="elem_PowerSupply_pin_GND">Must be connected to GND!</string>

    <string name="error">Error</string>
    <string name="err_N_isNotInputOrOutput">Pin {0} in component {1} is not a input or output</string>
    <string name="err_aSingleClockNecessary">A single clock component is necessary. All flip-flops must use this clock signal.</string>
    <string name="err_analyseNoInputs">The circuit has no labeled inputs</string>
    <string name="err_analyseNoOutputs">The circuit has no labeled outputs</string>
    <string name="err_breakTimeOut">Break timeout after {0} cycles</string>
    <string name="err_builder_exprNotSupported">Expression {0} not supported</string>
    <string name="err_builder_operationNotSupported">Operation {0} not supported</string>
    <string name="err_burnError">More then one output is active on a wire, causing a short circuit.</string>
    <string name="err_pullUpAndDown">It is not allowed to connect a pull-up and pull-down resistor to the same net.</string>
    <string name="err_cannotAnalyse_N">Cannot analyse Node {0}</string>
    <string name="err_containsVarAndNotVar">Contains [var] and [not var]</string>
    <string name="err_duplicatePinLabel">Pin {0} in component {1} exists twice</string>
    <string name="err_element_N_notFound">Component {0} not found</string>
    <string name="err_exact_N0_valuesNecessaryNot_N1">Exact {0} variables necessary, not {1}</string>
    <string name="err_ffNeedsToBeConnectedToClock">Flip-flop needs to be connected to the clock.</string>
    <string name="err_invalidFileFormat">Invalid file format</string>
    <string name="err_isAlreadyInitialized">Logic is already initialized</string>
    <string name="err_labelNotConnectedToNet_N">A tunnel {0} is not connected!</string>
    <string name="err_moreThenOneClocksFound">There are more then one clock</string>
    <string name="err_needs_N0_bits_found_N2_bits">There are {0} bits needed, but {1} bits found</string>
    <string name="err_netOfPin_N_notFound">Net of pin {0} not found</string>
    <string name="err_noClockFound">No clock found in logic</string>
    <string name="err_noInputsAvailable">No inputs available to set</string>
    <string name="err_noShapeFoundFor_N">No shape found for component {0}</string>
    <string name="err_noValueSetFor_N0_atElement_N1">No value set for {0} at component {1}</string>
    <string name="err_notAllOutputsSameBits">Not all connected outputs have the same bit count</string>
    <string name="err_notAllOutputsSupportHighZ">If multiple outputs are connected together, all of them have to be three-state outputs.</string>
    <string name="err_notInitialized">Logic not initialized</string>
    <string name="err_onOutConnectedToWire">No output connected to a wire: {0}</string>
    <string name="err_oneResultIsRequired">Table to small: One result is required!</string>
    <string name="err_output_N_notDefined">Output {0} not defined</string>
    <string name="err_pinMap_NoNameForPin_N">No Name for pin {0}</string>
    <string name="err_pinMap_Pin_N_AssignedTwicePin">Pin {0} assigned twice!</string>
    <string name="err_pinMap_noEqualsfound">No = found!</string>
    <string name="err_pinMap_pin_N0_isNotAnInput">Pin {0} is not an input!</string>
    <string name="err_pinMap_pin_N0_isNotAnOutput">Pin {0} is not an output!</string>
    <string name="err_pinMap_toMannyInputsDefined">To many inputs used!</string>
    <string name="err_pinMap_toMannyOutputsDefined">To many outputs used!</string>
    <string name="err_pinNotPresent">Pin not present</string>
    <string name="err_pinWithoutName">Found a pin without a name.</string>
    <string name="err_pin_N0_atElement_N1_notFound">Pin {0} not found at component {1}</string>
    <string name="err_pin_N_notFound">Pin {0} not found</string>
    <string name="err_pin_N_unknown">Pin {0} unknown</string>
    <string name="err_readOfHighZ">Read of high Z value</string>
    <string name="err_seemsToOscillate">Logic seems to oscillate.
To analyse you can run the circuit in single gate step mode.</string>
    <string name="err_portIsInUse">The remote port is in use! Is there an other instance running?</string>
    <string name="err_selectorInputCountMismatch">Number of inputs does not match selector bit count</string>
    <string name="err_spitterDefSyntaxError">Syntax error in splitter definition {0}</string>
    <string name="err_splitterBitsMismatch">Bit count of splitter is not matching</string>
    <string name="err_splitterNotAllBitsDefined">Not all input bits are defined!</string>
    <string name="err_splitterNotUnambiguously">Input bits are defined several times!</string>
    <string name="err_spitterToManyBits">Only 64 bits allowed in splitter!</string>
    <string name="err_tableBecomesToSmall">Two inputs are required!</string>
    <string name="err_toManyInputs_max_N0_is_N1">To many inputs, allowed are {0} but {1} are found.</string>
    <string name="err_toManyInputsIn_N0_max_N1_is_N2">To many variables used in {0},
allowed are {1} variables but {2} are found.</string>
    <string name="err_varNotAllowedInCUPL_N">Variable {0} is not allowed in CUPL source!</string>
    <string name="err_varNotDefined_N">Variable {0} not defined</string>
    <string name="err_parserUnexpectedToken_N">Unexpected Token {0}</string>
    <string name="err_parserMissingClosedParenthesis">Missing closed parenthesis</string>
    <string name="err_notANumber_N0_inLine_N1">Value {0} in line {1} is not a number!</string>
    <string name="err_testDataExpected_N0_found_N1_numbersInLine_N2">Expected {0} but found {1} values in line {2}!</string>
    <string name="err_unexpectedToken_N0_inLine_N1">Unexpected token ({0}) in line {1}.</string>
    <string name="err_variable_N0_notFound">Variable {0} not found!</string>
    <string name="err_noTestInputSignalsDefined">No input signals defined in test vector!</string>
    <string name="err_noTestOutputSignalsDefined">No output signals defined in test vector!</string>
    <string name="err_noTestData">Not test data found.</string>
    <string name="err_remoteExecution">Error during execution of a remote command</string>
    <string name="err_pullUpAndDownNotAllowed">It's not allowed to connect a pull up and a pull down resistor to a single wire.</string>
    <string name="err_openingDocumentation">Could not open the browser.</string>
    <string name="err_splitterDoesNotSupportHighZInputs">The splitter does not support high z inputs! Use a pull up or pull down resistor.</string>
    <string name="err_splitterAllowsOnlyOneHighZInput">A splitter which allows high z inputs can only have one input!</string>
    <string name="err_couldNotCreateFolder_N0">Could not create folder &quot;{0}&quot;!</string>
    <string name="err_switchHasNoNet">It is not allowed to connect only inputs to a switch.</string>
    <string name="err_file_N0_ExistsTwiceBelow_N1">The file {0} exists multiple times below {1}.</string>
    <string name="err_couldNotFindIncludedFile_N0">Could not find the file {0}.</string>
    <string name="err_postProcessErrorIn_N0">Error during execution of &quot;{0}&quot;.</string>
    <string name="err_processDoesNotTerminate_N">The process &quot;{0}&quot; does not return!</string>
    <string name="err_processExitedWithError_N1_N2">The process returns the non zero value {0}: {1}</string>
    <string name="err_errorRunningFitter">Error starting the external fitter!</string>
    <string name="err_noExpressionsAvailable">There are no minimized equations!</string>
    <string name="err_varName_N_UsedTwice">The variable {0} is used twice!</string>
    <string name="err_fileNeedsToBeSaved">The file needs to be saved!</string>
    <string name="err_recursiveNestingAt_N0">The circuit {0} imports itself!</string>
    <string name="err_minimizationFailed">The result of the minimization is not correct!
The names of the variables may not be unique.</string>
    <string name="err_toManyIterations">To many iterations in a loop.</string>
    <string name="err_diodeNeedsPullUpResistorAtOutput">Diode needs a pull up resistor at its output!</string>
    <string name="err_diodeNeedsPullDownResistorAtOutput">Diode needs a pull down resistor at its output!</string>
    <string name="err_testSignal_N_notFound">Test signal {0} not found in the circuit!</string>
    <string name="err_toManyBits_Found_N0_maxIs_N1">Only {1} bits allowed, but {0} bits found!</string>
    <string name="err_MultiBitFlipFlopFound">Flipflops with more then one bits are not allowed!</string>
    <string name="err_invalidTransmissionGateState">The two control inputs of a transmission gate must be inverted!</string>
    <string name="err_nameUsedTwice_N">Signal {0} is used twice!</string>
    <string name="err_errorParsingTestdata">Error parsing the test data.</string>
    <string name="err_backtrackOf_N_isImpossible">The model component {0} can not be analysed.</string>
    <string name="err_errorInPowerSupply">Error in wiring of power supply.</string>

    <string name="key_AddrBits">Address Bits</string>
    <string name="key_AddrBits_tt">Number of address bits used.</string>
    <string name="key_Bits">Data Bits</string>
    <string name="key_Bits_tt">Number of data bits used.</string>
    <string name="key_Color">Color</string>
    <string name="key_Color_tt">The Color of the element.</string>
    <string name="key_backgroundColor">Background color</string>
    <string name="key_backgroundColor_tt">Background color of the circuit when it is embedded in another circuit. Is not used for DIL packages.</string>
    <string name="key_Cycles">Timeout cycles</string>
    <string name="key_Cycles_tt">If this amount of cycles is reached without a break signal, an error is created.</string>
    <string name="key_Data">Data</string>
    <string name="key_Data_tt">The values stored in this element.</string>
    <string name="key_Default">Default</string>
    <string name="key_Default_tt">This value is set if the circuit is started</string>
    <string name="key_InDefault">Default</string>
    <string name="key_InDefault_tt">This value is set if the circuit is started. A "Z" means high-z state.</string>
    <string name="key_isHighZ">Is three-state input</string>
    <string name="key_isHighZ_tt">If set the input is allowed to be in high-z state. This is also allowed
        if high-z ("Z") is set as the default value.</string>
    <string name="key_Description">Description</string>
    <string name="key_Description_tt">A short description of this element and its usage.</string>
    <string name="key_Frequency">Frequency/Hz</string>
    <string name="key_Frequency_tt">The real time frequency used for the real time clock</string>
    <string name="key_IEEEShapes">Use IEEE 91-1984 shapes</string>
    <string name="key_IEEEShapes_tt">Use IEEE 91-1984 shapes instead of rectangular shapes</string>
    <string name="key_Inputs">Number of Inputs</string>
    <string name="key_Inputs_tt">The Number of Inputs used. Every input needs to be connected.</string>
    <string name="key_Label">Label</string>
    <string name="key_Label_tt">The name of this element.</string>
    <string name="key_Size">Size</string>
    <string name="key_Size_tt">The size of the component in the circuit.</string>
    <string name="key_Language">Language</string>
    <string name="key_Language_tt">Language of the GUI. Will only take effect after a restart.</string>
    <string name="key_NetName">Net name</string>
    <string name="key_NetName_tt">All nets with identical name are connected together.</string>
    <string name="key_InputSplitting">Input Splitting</string>
    <string name="key_InputSplitting_tt">Example &quot;4,2,2&quot; or &quot;[Bits]*[Count] like &quot;1*16&quot; for 16 single bits.
        The bits to be used can also be specified directly "4-7,0-3".
        Thus, any division can be specified.
        The input bits must be specified completely and unambiguously.</string>
    <string name="key_OutputSplitting">Output splitting</string>
    <string name="key_OutputSplitting_tt">Example &quot;4,2,2&quot; or &quot;[Bits]*[Count] like &quot;1*16&quot; for 16 single bits.
        The bits to be used can also be specified directly "4-7,0-3".
        Thus, any division can be specified.
        Output bits can also be output several times: "0-7,1-6,4-7"</string>
    <string name="key_SelectorBits">Number of Selector Bits</string>
    <string name="key_SelectorBits_tt">Number of bits used for the selector input.</string>
    <string name="key_Signed">Signed</string>
    <string name="key_Signed_tt">If selected the comparison is performed with signed (2th complement) values.</string>
    <string name="key_Closed">Closed</string>
    <string name="key_Closed_tt">Sets the initial state of the switch.</string>
    <string name="key_Value">Value</string>
    <string name="key_Value_tt">The value of the constant.</string>
    <string name="key_Width">Width</string>
    <string name="key_Width_tt">With of symbol if this circuit is used as an component in an other circuit.</string>
    <string name="key_autoReload">Reload at model start</string>
    <string name="key_autoReload_tt">Reloads the hex file every time the model is started.</string>
    <string name="key_flipSelPos">Flip selector position</string>
    <string name="key_flipSelPos_tt">This option allows you to move te selector pin to the opposite side of the plexer.</string>
    <string name="key_intFormat">Number Format</string>
    <string name="key_intFormat_tt">The format used to show the numbers.</string>
    <string name="key_intFormat_ascii">ascii</string>
    <string name="key_intFormat_bin">bin</string>
    <string name="key_intFormat_dec">decimal</string>
    <string name="key_intFormat_def">default</string>
    <string name="key_intFormat_hex">hex</string>    
    <string name="key_barrelSigned">shift input has sign</string>    
    <string name="key_barrelSigned_tt">shift input data has two complement format</string>
    <string name="key_barrelShifterMode">Mode</string>
    <string name="key_barrelShifterMode_tt">Mode of barrel shifter</string>
    <string name="key_barrelShifterMode_normal">Normal</string>
    <string name="key_barrelShifterMode_rotate">Rotate</string>
    <string name="key_barrelShifterMode_arithmetic">Arithmetic</string>
    <string name="key_direction">Direction</string>
    <string name="key_direction_tt">Set direction.</string>
    <string name="key_direction_left">left</string>
    <string name="key_direction_right">right</string>
    <string name="key_maxStepCount">Max number of steps to show</string>
    <string name="key_maxStepCount_tt">The maximal number of values stored. If the maximum number is reached, the oldest values are discarded.</string>
    <string name="key_microStep">Show single gate steps</string>
    <string name="key_microStep_tt">Shows all single step steps in the graphic.</string>
    <string name="key_rotation">Rotation</string>
    <string name="key_rotation_tt">The orientation of the Element in the circuit.</string>
    <string name="key_runRealTime">Start real time clock</string>
    <string name="key_runRealTime_tt">If enabled the runtime clock is started when the circuit is started</string>
    <string name="key_showDataGraph">Show measurement graph</string>
    <string name="key_showDataGraph_tt">When the simulation is started, a graph with the measured values is shown.</string>
    <string name="key_showDataGraphMicro">Show measurement graph in single gate step mode</string>
    <string name="key_showDataGraphMicro_tt">When the simulation is started, a graph with the measured values in the
        gate step mode is shown. All gate changes are included in the graph.</string>
    <string name="key_showDataTable">Show measurement values</string>
    <string name="key_showDataTable_tt">When the simulation is started, a table with the measured values is shown.</string>
    <string name="key_showList">Show list file if available</string>
    <string name="key_termHeight">Lines</string>
    <string name="key_termHeight_tt">The number of lines to show.</string>
    <string name="key_termWidth">Characters per line</string>
    <string name="key_termWidth_tt">The number of characters shown in a single line.</string>
    <string name="key_valueIsProbe">Use as measurement value</string>
    <string name="key_valueIsProbe_tt">Is set the value is a measurement value and appears in the graph and data table.</string>
    <string name="key_Testdata">Test data</string>
    <string name="key_Testdata_tt">The description of the test case. Details of the syntax can be found in the help dialog of the test data editor.</string>
    <string name="key_graphicWidth">Width in pixels</string>
    <string name="key_graphicWidth_tt">The screen width in pixels.</string>
    <string name="key_graphicHeight">Height in pixels</string>
    <string name="key_graphicHeight_tt">The screen height in pixels.</string>
    <string name="key_isProgramMemory">Program Memory</string>
    <string name="key_isProgramMemory_tt">Makes this ROM to program memory. So it can be accessed by an external IDE.</string>
    <string name="key_Blown">Programmed</string>
    <string name="key_Blown_tt">If set a diode is "blown" or "programmed". At a floating gate FET the floating gate is charged. You can change this setting with the key 'p'.</string>
    <string name="key_ExpressionFormat">Format</string>
    <string name="key_ExpressionFormat_tt">Screen format of expressions.</string>
    <string name="key_relayNormallyClosed">Relay is normally closed.</string>
    <string name="key_relayNormallyClosed_tt">If set the relay is closed if the input is low.</string>
    <string name="key_commonCathode">Common Cathode</string>
    <string name="key_commonCathode_tt">If selected the common cathode input is also simulated.</string>
    <string name="key_ledPersistence">Avoid Flicker</string>
    <string name="key_ledPersistence_tt">It is not possible to increase the frequency so much that the flickering disappears.
        With this option you can stabilize the display by keeping the LEDs on until the common cathode goes down again.
        This simulates a frequency above the critical flicker fusion frequency.</string>
    <string name="key_atf1502Fitter">ATF1502 Fitter</string>
    <string name="key_atf1502Fitter_tt">Path to the fitter for the ATF1502. Enter the full path to the file fit1502.exe provided by ATMEL.</string>
    <string name="key_pin">Pin number</string>
    <string name="key_pin_tt">An empty field means this signal is not assigned to a pin.</string>
    <string name="key_rowDataBits">Rows</string>
    <string name="key_rowDataBits_tt">Specifies the number of rows by specifying the number of bits of the row word.</string>
    <string name="key_colAddrBits">Address bits of columns</string>
    <string name="key_colAddrBits_tt">Addresses the individual columns. Three bits means eight columns.</string>
    <string name="key_lockedMode">Modification locked</string>
    <string name="key_lockedMode_tt">The circuit is locked. It is possible to configure diodes and FGF-FETs.</string>
    <string name="key_isDIL">DIL package</string>
    <string name="key_isDIL_tt">If set, this circuit is shown in a DIL package.
        To assign the pins correctly, the pin numbers must be set on all inputs and outputs.</string>
    <string name="key_pinNumber">Pin number</string>
    <string name="key_pinNumber_tt">Number of this pin. Used for the representation of a circuit as a DIL package and
        the pin assignment when programming a CPLD.</string>
    <string name="key_pinCount">Number of DIL pins</string>
    <string name="key_pinCount_tt">Number of pins. A zero means that the number od pins is determined automatically.</string>
    <string name="key_defTreeSelect">Component tree view is visible at startup.</string>
    <string name="key_defTreeSelect_tt">If set, the component tree view is enabled at startup.</string>
    <string name="key_inverterConfig">inverted Inputs</string>
    <string name="key_inverterConfig_tt">You can select the inputs that are to be inverted.</string>
    <string name="key_fontSize">Menus Font Size [%]</string>
    <string name="key_fontSize_tt">Size of the fonts used in the menu in percent of the default size.</string>
    <string name="key_withEnable">Enable Input</string>
    <string name="key_withEnable_tt">If set an enable input (T) is available.</string>
    <string name="key_unidirectional">Unidirectional</string>
    <string name="key_unidirectional_tt">Unidirectional transistors propagate a signal only from source to drain. They are
        much faster to simulate than bidirectional transistors. Since there is no feedback from drain to source, in this
        mode, the transistor can not short the connected wires when it is conducting. Thus, this mode is necessary to
        simulate certain CMOS circuits.</string>
    <string name="key_activeLow">Active Low</string>
    <string name="key_activeLow_tt">If selected the output is low if the component is active.</string>

    <string name="mod_insertWire">Inserted wire.</string>
    <string name="mod_insertCopied">Insert from clipboard.</string>
    <string name="mod_setKey_N0_in_element_N1">Value ''{0}'' in component ''{1}'' modified.</string>
    <string name="mod_setAttributesIn_N">Attributes of component ''{0}'' modified.</string>
    <string name="mod_wireDeleted">Wire deleted.</string>
    <string name="mod_movedOrRotatedElement_N">Component ''{0}'' moved or rotated.</string>
    <string name="mod_movedWire">Wire moved.</string>
    <string name="mod_deletedSelection">Selection deleted.</string>
    <string name="mod_insertedElement_N">Component ''{0}'' inserted.</string>
    <string name="mod_deletedElement_N">Component ''{0}'' deleted.</string>
    <string name="mod_insertedWire">Wire inserted.</string>
    <string name="mod_movedSelected">Selection moved.</string>
    <string name="mod_undo_N">Undo: {0}</string>
    <string name="mod_redo_N">Redo: {0}</string>
    <string name="mod_circuitAttrModified">Modified circuit attributes.</string>
    <string name="mod_modifiedMeasurementOrdering">Ordered measurements.</string>

    <string name="lib_Logic">Logic</string>
    <string name="lib_arithmetic">Arithmetic</string>
    <string name="lib_flipFlops">FlipFlops</string>
    <string name="lib_io">IO</string>
    <string name="lib_memory">Memory</string>
    <string name="lib_mux">Plexers</string>
    <string name="lib_wires">Wires</string>
    <string name="lib_switching">Switches</string>
    <string name="lib_misc">Misc.</string>
    <string name="lib_more">more</string>

    <string name="menu_about">About</string>
    <string name="menu_analyse">Analysis</string>
    <string name="menu_analyse_tt">Analyses the actual circuit</string>
    <string name="menu_cut">Cut</string>
    <string name="menu_copy">Copy</string>
    <string name="menu_custom">Custom</string>
    <string name="menu_delete">Delete components</string>
    <string name="menu_delete_tt">Delete selected single component or group of components.</string>
    <string name="menu_edit">Edit</string>
    <string name="menu_editAttributes">Edit circuit attributes</string>
    <string name="menu_editAttributes_tt">These attributes effect the behavior if the circuit is included in other circuits.</string>
    <string name="menu_editRunAttributes">Simulation Settings</string>
    <string name="menu_editRunAttributes_tt">Settings used to start the simulation</string>
    <string name="menu_editSettings">Settings</string>
    <string name="menu_editSettings_tt">Edits Digitals preferences</string>
    <string name="menu_element">Stop Simulation</string>
    <string name="menu_element_tt">Stops the simulation and allows to edits the circuit.</string>
    <string name="menu_elements">Components</string>
    <string name="menu_export">Export</string>
    <string name="menu_exportPNGLarge">Export PNG large</string>
    <string name="menu_exportPNGSmall">Export PNG small</string>
    <string name="menu_exportSVG">Export SVG</string>
    <string name="menu_exportSVGLaTex">Export SVG+LaTeX</string>
    <string name="menu_exportAnimatedGIF">Export Animated GIF</string>
    <string name="menu_fast">Run Fast</string>
    <string name="menu_fast_tt">Runs the circuit until a break is detected by the BRK component.</string>
    <string name="menu_file">File</string>
    <string name="menu_help">Help</string>
    <string name="menu_update">Update</string>
    <string name="menu_update_tt">Updates the components menu.</string>
    <string name="menu_maximize">Fit to window</string>
    <string name="menu_micro">Single gate stepping</string>
    <string name="menu_micro_tt">Runs the circuit in single gate step mode</string>
    <string name="menu_new">New</string>
    <string name="menu_new_tt">Clear actual circuit.</string>
    <string name="menu_newSub">New nested Circuit</string>
    <string name="menu_newSub_tt">Opens a new window to create a new nested circuit.</string>
    <string name="menu_open">Open</string>
    <string name="menu_openRecent">Open Recent</string>
    <string name="menu_openWin">Open in New Window</string>
    <string name="menu_openWin_tt">Opens a circuit in a new window</string>
    <string name="menu_orderInputs">Order Inputs</string>
    <string name="menu_orderInputs_tt">Order the inputs for the usage as nested circuit</string>
    <string name="menu_orderMeasurements">Order measurement values</string>
    <string name="menu_orderMeasurements_tt">Orders the measurement values in the graphical and table view</string>
    <string name="menu_orderOutputs">Order Outputs</string>
    <string name="menu_orderOutputs_tt">Order the outputs for the usage as nested circuit</string>
    <string name="menu_paste">Paste</string>
    <string name="menu_insertAsNew">Paste in new window</string>
    <string name="menu_insertAsNew_tt">The content of the clip board is pasted in a new window.</string>
    <string name="menu_rotate">Rotate</string>
    <string name="menu_sim">Simulation</string>
    <string name="menu_run">Start of Simulation</string>
    <string name="menu_run_tt">Starts the simulation of the circuit.</string>
    <string name="menu_save">Save</string>
    <string name="menu_saveAs">Save As</string>
    <string name="menu_saveData">Save Data</string>
    <string name="menu_saveData_tt">Save data as CSV file</string>
    <string name="menu_speedTest">Speed Test</string>
    <string name="menu_speedTest_tt">Performs a speed test by calculating the max. clock frequency.</string>
    <string name="menu_step">Step</string>
    <string name="menu_step_tt">Calculating a single gate step</string>
    <string name="menu_synthesise">Synthesise</string>
    <string name="menu_synthesise_tt">Generates the minimal bool expressions described by a truth table.</string>
    <string name="menu_table_N_variables">{0} variables</string>
    <string name="menu_table_columnsAdd">Add a result Column</string>
    <string name="menu_table_columnsAddVariable">Add a variable Column</string>
    <string name="menu_table_columnsAddVariable_tt">Adds a new variable column.</string>
    <string name="menu_table_columnsAdd_tt">Adds a new result column.</string>
    <string name="menu_table_create">Create</string>
    <string name="menu_table_createCUPL">CUPL source</string>
    <string name="menu_table_createCUPL_tt">Creates a CUPL source file containing the define circuit.</string>
    <string name="menu_table_createTT2">TT2 / JED</string>
    <string name="menu_table_createTT2_tt">Creates a file containing the circuit similar to the Berkeley Logic Interchange Format (BLIF).
        After that the Atmel fitter is started to create the JEDEC file. </string>
    <string name="menu_table_createCircuit">Circuit</string>
    <string name="menu_table_createCircuit_tt">Creates a circuit which reproduces the truth table.</string>
    <string name="menu_table_createCircuitJK">Circuit with JK flip-flops</string>
    <string name="menu_table_createCircuitJK_tt">Creates a circuit which reproduces the truth table. Uses JK flip-flops.</string>
    <string name="menu_table_createNAnd">Circuit with NAnd gates</string>
    <string name="menu_table_createNAndTwo">Circuit with NAnd gates with two inputs</string>
    <string name="menu_table_createNAndTwo_tt">Use only NAnd gates with two inputs.</string>
    <string name="menu_table_createNAnd_tt">Creates a circuit which reproduces the truth table only with NAnd gates.</string>
    <string name="menu_table_createNOr">Circuit with NOr gates</string>
    <string name="menu_table_createNOrTwo">Circuit with NOr gates with two inputs</string>
    <string name="menu_table_createNOrTwo_tt">Use only NOr gates with two inputs.</string>
    <string name="menu_table_createNOr_tt">Creates a circuit which reproduces the truth table only with NOr gates.</string>
    <string name="menu_table_createTwo">Circuit with two input gates</string>
    <string name="menu_table_createTwo_tt">create circuit, use only gates with two inputs</string>
    <string name="menu_table_create_hardware">Device</string>
    <string name="menu_table_create_jedec">JEDEC (*.jed)</string>
    <string name="menu_table_create_jedec_tt">Creates a JEDEC file for the device</string>
    <string name="menu_table_exportTableLaTeX">Export LaTeX</string>
    <string name="menu_table_exportHex">Export HEX</string>
    <string name="menu_table_exportHex_tt">You can load the HEX file to a ROM or a LUT.</string>
    <string name="menu_table_inputs">Inputs</string>
    <string name="menu_table_new">New</string>
    <string name="menu_table_newColumns">Add Columns</string>
    <string name="menu_table_new_combinatorial">Combinatorial</string>
    <string name="menu_table_new_sequential">Sequential</string>
    <string name="menu_table_new_sequential_bidir">Sequential bidirectional</string>
    <string name="menu_table_outputs">Outputs</string>
    <string name="menu_table_reorder">Reorder</string>
    <string name="menu_table_set">Set</string>
    <string name="menu_table_setXTo0">Set X to 0</string>
    <string name="menu_table_setXTo0_tt">Sets the Don't Cares to 0.</string>
    <string name="menu_table_setXTo1">Set X to 1</string>
    <string name="menu_table_setXTo1_tt">Sets the Don't Cares to 1.</string>
    <string name="menu_table_JK">Create J/K Expressions</string>
    <string name="menu_table_setAllToX">Set all to X</string>
    <string name="menu_table_setAllToX_tt">Set all values to "don't care".</string>
    <string name="menu_table_setAllTo0">Set all to 0</string>
    <string name="menu_table_setAllTo0_tt">Set all values to zero.</string>
    <string name="menu_table_setAllTo1">Set all to 1</string>
    <string name="menu_table_setAllTo1_tt">Set all values to one.</string>
    <string name="menu_terminalDelete">Delete</string>
    <string name="menu_terminalDelete_tt">Delete the terminals content.</string>
    <string name="menu_view">View</string>
    <string name="menu_zoomIn">Zoom In</string>
    <string name="menu_zoomOut">Zoom Out</string>
    <string name="menu_expression">Expression</string>
    <string name="menu_expression_tt">Create a circuit from an expression.</string>
    <string name="menu_runTests">Run Tests</string>
    <string name="menu_runTests_tt">Runs all test cases in the circuit</string>
    <string name="menu_actualToDefault">Set Inputs</string>
    <string name="menu_actualToDefault_tt">Use actual input values as new default values.</string>
    <string name="menu_restoreAllFuses">Reset all diodes and FGFETs</string>
    <string name="menu_restoreAllFuses_tt">Resets all diodes (fuses) and FGFETs to the "not programed" state. The actual fuse configuration is lost!</string>
    <string name="menu_programDiode">Program diode</string>
    <string name="menu_help_elements">Components</string>
    <string name="menu_help_elements_tt">Shows a list of all available components.</string>
    <string name="menu_viewHelp">Help Dialog</string>
    <string name="menu_viewHelp_tt">Shows the help dialog describing the actual circuit.</string>
    <string name="menu_probe_memory">Memory</string>
    <string name="menu_probe_memory_tt">Shows the content of memory components.</string>
    <string name="menu_treeSelect">Component Tree View</string>
    <string name="menu_treeSelect_tt">Shows a tree view of available components at the left side.</string>

    <string name="menu_special">Special 74xx Funtions</string>
    <string name="menu_addPrefix">Add IO-Prefix</string>
    <string name="menu_addPrefix_tt">A prefix is added to all selected inputs and outputs.
        Is used to simplify the doubling of circuits within a 74xx circuit.</string>
    <string name="menu_removePrefix">Remove IO-Prefix</string>
    <string name="menu_removePrefix_tt">The first character from the inputs and outputs labels are removed.
        Is used to simplify the doubling of circuits within a 74xx circuit.</string>
    <string name="menu_numbering">Pin Wizard</string>
    <string name="menu_numbering_tt">Wizard to apply pin numbers to the inputs and outputs.</string>
    <string name="menu_removePinNumbers">Remove Pin Numbers</string>
    <string name="menu_removePinNumbers_tt">Remove all pin numbers in the circuit</string>
    <string name="msg_pin_numbering_N">Select pin {0}:</string>

    <string name="menu_undo">Undo</string>
    <string name="menu_undo_tt">Revert last modification</string>
    <string name="menu_redo">Redo</string>
    <string name="menu_redo_tt">Apply last reverted modification again.</string>
    <string name="menu_showDataAsGraph">Show graph</string>
    <string name="menu_showDataAsGraph_tt">Show the data as a Graph.</string>
    <string name="menu_showDataAsTable">Show table</string>
    <string name="menu_showDataAsTable_tt">Shows values as a table.</string>
    <string name="menu_addPowerSupply">Add power supply</string>
    <string name="menu_addPowerSupply_tt">Adds a power supply to the circuit.</string>


    <string name="message">Digital

A simple simulator for digital circuits.
Written bei H.Neemann in 2016.

The icons are taken from the Tango Desktop Project.</string>
    <string name="msg_N_nodes">{0} nodes</string>
    <string name="msg_analyseErr">Error analysing the circuit</string>
    <string name="msg_clockError">Error during a clock state change</string>
    <string name="msg_color">Color</string>
    <string name="msg_errorCalculatingStep">Error calculating a step</string>
    <string name="msg_errorCreatingModel">Error creating the circuit</string>
    <string name="msg_errorDuringCalculation">Error during simplification</string>
    <string name="msg_errorEditingValue">Error editing a attribute value</string>
    <string name="msg_errorImportingModel_N0">Error importing the circuit {0}!</string>
    <string name="msg_errorUpdatingLibrary">Error updating the component library!!</string>
    <string name="msg_errorReadingFile">Error reading a file</string>
    <string name="msg_errorWritingFile">Error writing a file</string>
    <string name="msg_fastRunError">Error at fast run</string>
    <string name="msg_frequency_N">The maximum frequency is {0} kHz</string>
    <string name="msg_missingShape_N">Shape {0} is missing</string>
    <string name="msg_pins">Pin assignment</string>
    <string name="msg_pinMap_pin_N_is_N">Pin {0}: {1}</string>
    <string name="msg_restartNeeded">A restart is required for the changes to take effect!</string>
    <string name="msg_noRomFound">No ROM found! ROM needs to be set to be program memory.</string>
    <string name="msg_moreThenOneRomFound">More then one ROM found! Only one ROM must be set to be program memory.</string>
    <string name="msg_remoteUnknownCommand">Command {0} unknown!</string>
    <string name="msg_enterAnExpression">Enter an expression:</string>
    <string name="msg_runningTestError">Error running the tests:</string>
    <string name="msg_testResult">Test result</string>
    <string name="msg_test_N_Passed">{0} passed</string>
    <string name="msg_test_N_Failed">{0} failed</string>
    <string name="msg_testExp_N0_found_N1">E: {0} / F: {1}</string>
    <string name="msg_creatingHelp">Error creating the help!</string>
    <string name="msg_clipboardContainsNoImportableData">The clipboard contains no importable data!</string>
    <string name="msg_selectAnEmptyFolder">Select an empty folder!</string>
    <string name="msg_errorWhileExecutingTests_N0">During the execution of the tests {0} an error has occurred!</string>
    <string name="msg_fitterResult">Message from the external fitter</string>
    <string name="msg_startExternalFitter">Execution of external fitter</string>
    <string name="msg_actualCircuit">Actual Circuit</string>
    <string name="msg_fileNotAccessible">The selected file name is not importable from the actual project!</string>
    <string name="msg_fileIsNotUnique">The file name is not unique!</string>
    <string name="msg_fileNotImportedYet">The file has not yet been imported.</string>
    <string name="msg_fileExists">The file {0} already exists! Do you want to overwrite the file?</string>
    <string name="msg_test_missingLines">(To many entries!)</string>
    <string name="msg_test_missingLines_tt">All test cases are executed, but not all results are shown.
        The evaluation of the test result is nevertheless correct!</string>
    <string name="msg_isLocked">The editing of the circuit is disabled. You can remove the lock at
        "{0} -> {1} -> {2}".
        However, copying of components and the configuration of diodes and FG-FETs with the [P] key is also possible in the locked mode.</string>
    <string name="msg_speedTestError">Error during speed test!</string>
    <string name="msg_pin_N">Pin {0}</string>
    <string name="msg_numberingWizard">Numbering Wizard</string>
    <string name="msg_framesWritten_N">Written frames: {0}</string>
    <string name="msg_errorWritingGif">Error writing to GIF file!</string>
    <string name="btn_gifComplete">Ready</string>
    <string name="btn_gifComplete_tt">The GIF file is finalized and closed.</string>
    <string name="msg_gifExport">GIF Export</string>
    <string name="msg_errCausedBy">caused by</string>
    <string name="msg_inputsToInvert">Inputs to invert</string>
    <string name="msg_none">none</string>
    <string name="msg_errGettingPinNames">Could not determine the names of the pins.</string>
    <string name="msg_errInFile_N">Occurred in file {0}.</string>
    <string name="msg_affectedComponentsAre_N">Affected are: {0}.</string>
    <string name="msg_signal_N">Signal {0}</string>
    <string name="msg_invalidSignalsAnalysed">If inputs have no name set, they are not included
        as variables in the analysis, but treated as constants!</string>
    <string name="msg_thereAreMissingPinNumbers">No pin numbers assigned to the pins {0}!</string>

    <string name="ok">Ok</string>
    <string name="rot_0">0°</string>
    <string name="rot_180">180°</string>
    <string name="rot_270">270°</string>
    <string name="rot_90">90°</string>
    <string name="stat_clocks">{0} half cycles</string>
    <string name="tt_deleteItem">Deletes the selected item</string>
    <string name="tt_moveItemDown">Move the item down</string>
    <string name="tt_moveItemUp">Move the item up</string>
    <string name="win_allSolutions">All possible solutions</string>
    <string name="win_confirmExit">Confirm Exit!</string>
    <string name="win_measures">Measurements</string>
    <string name="win_measures_fullstep">Measurements full clock step</string>
    <string name="win_measures_microstep">Measurements single gate step</string>
    <string name="win_saveChanges">Save Changes?</string>
    <string name="win_stateChanged">State Changed!</string>
    <string name="win_table">Table</string>
    <string name="win_table_exportDialog">Export</string>
    <string name="win_itempicker_title">Select</string>
    <string name="win_testdata_N">Testdata {0}</string>
    <string name="win_data">Data</string>
    <string name="win_valueInputTitle_N">Input {0}</string>

    <string name="btn_help">Help</string>

    <string name="msg_expressionHelpTitle">Expressions</string>
    <string name="msg_expressionHelp">To define an expression you can use all most common notations:

And: &quot;&amp;&quot;, &quot;&amp;&amp;&quot;, &quot;*&quot;, &quot;∧&quot;
Or: &quot;|&quot;, &quot;||&quot;, &quot;+&quot;, &quot;∨&quot;, &quot;#&quot;
XOr: &quot;^&quot;, &quot;⊻&quot;
Not: &quot;!&quot;, &quot;~&quot;, &quot;&#172;&quot;

As usual AND precedes OR and XOr.

Multiple expressions can be separated by "," or ";".
If you want to name the expressions you can use the
let-command: "let U=A+B, let V=A*B"</string>
    <string name="msg_testVectorHelpTitle">Test vectors</string>
    <string name="msg_testVectorHelp"><![CDATA[<html><body>
<p>The first line has to contain the names of inputs and outputs.
The following lines contain the expected values.
A 'X' represents a don't care, and a 'Z' represents a high Z value.
If a 'C' is used, at first all other values are set, after that a clock cycle is performed and than the
values are compared. So it's easier to test sequential logic.
A line which starts with a number sign ('#') is a comment.</p>

<p>So a test for a 2-bit counter could look like this:</p>

<p><code>
C Q1 Q0<br/>
0 0  0<br/>
C 0  1<br/>
C 1  0<br/>
C 1  1<br/>
C 0  0
</code></p>

<p>The tests are executed by Run->Run Tests.</p>
<p>
To make it easier to create a lot of test vectors there is the 'repeat([n])' statement:
If a line begins with 'repeat([n])', [n] test lines are generated. The
Variable 'n' can be used to generate the test data. With 'repeat(16)'
16 lines are created, where n goes from 0 to 15. If there are multiple bit inputs,
and these are to be set together to a binary value, this can be done with the
'bits([bits], [value])' statement. This is used to create [bits] bits of the value [value].</p>

<p>The following is an example that tests a 4-bit adder:</p>

<p>
<code>
           C_i-1  A_3 A_2 A_1 A_0  B_3 B_2 B_1 B_0  C_i S_3 S_2 S_1 S_0<br/>
repeat(256)  0    bits(4,n>>4)     bits(4,n)        bits(5,(n>>4)+(n&15))<br/>
repeat(256)  1    bits(4,n>>4)     bits(4,n)        bits(5,(n>>4)+(n&15)+1)
</code>
</p>
<p>The input signals are the carry-in (C_i-1) and the eight input bits A_3-A_0 and B_3-B_0.
The 4 input bits are generated with the 'bits' instruction. The result (C_i, S_3-S_0) is also generated
by a 'bits' instruction.
This happens once with C_i-1 = 0 and in the next line with C_i-1 = 1.
In this way, 512 test rows are generated which cover all possible input configurations.</p>
</body></html>]]></string>

</resources>