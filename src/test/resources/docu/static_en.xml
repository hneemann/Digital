<?xml version="1.0" encoding="UTF-8" ?>
<root>
    <chapter name="Digital">
        <subchapter name="Introduction">
            <par>
                Digital is a simulator for digital circuits. A circuit consists of one or more number of logic gates connected 
                to each other using lines whereas the behavior of the overall circuit can be simulated. The user can interact with 
                the simulation by either pressing a Buttons or setting input values.
            </par>
            <par>
                In this way, most of the basic circuits used in digital electronics can be built and simulated. In the folder
                <e> examples </e>, users can browse for examples that includes a functional 16-bit single-cycle Harvard processor.
            </par>
            <par>
                The simulator has two modes of operation: Editing and Simulation mode. 
                
                In the editing mode, modification of circuit can be performed in this mode. Users can add or connect components. 
                In this mode, simulation is disabled.
                
                To enable simulation mode, users should press the <e>Start</e> button in the tool bar. Before the simulation is enabled, 
                simulated circuit is checked with errors. An error message apppears stating that the simulated circuit has errors. 
                If simulated circuit is free from errors, users can now interact with the running simulation. To continue editing 
                the circuit, users must first stop the simulation.
            </par>
        </subchapter>
        <subchapter name="First Steps">
            <par><image src="scr00.png"/></par>
            <par>
                For the first example, a circuit is to be constructed with an exclusive OR (XOR) gate.
                From the main window, the <e>Components</e> menu allows you to select the various components. This components,
                if enabled or selected, it can be placed in the drawing panel. This process can be cancelled by pressing 
                ESC key at any time.
                
                Start by selecting input to be added to the circuit. Input values can be change interactively 
                by using the mouse later on.
            <par><image src="scr01.png"/></par>
            <par>
                After selecting appropriate components, placed it by clicking on drawing panel. The dot 
                on the component symbol is a connection point between the component and the wire, which will be connected later on.
                The red dot indicates that the component is active. So, the change in the dot color signifies a change in the the signal value.    
            </par>
            <par><image src="scr02.png"/></par>
            <par>
                In the same way, a second input is added. It is the best way for the user to add it directly below the first input.
            </par><image src="scr03.png"/></par>
            <par>
                After adding the inputs, select the Exclusive-Or gate. This gate represents the actual Exclusive-OR logical function.
            </par>
            <par><image src="scr04.png"/></par>
            <par>
                The XOR gate can now be added in the circuit. It is best to placed it in a way that succeding wiring connections 
                is made as simple as possible. The "blue" dots indicate the input terminal of the XOR gate.
            </par>
            <par><image src="scr05.png"/></par>
            <par>
                Now, select an output which could be used to display a signal state or to later pass signals to
                an embedding circuit.
            </par>
            <par><image src="scr06.png"/></par>
            <par>
                This is placed in a way that it can be wired easily. The ouput component also has a blue dot 
                that indicates an input point.
            </par>
            <par><image src="scr07.png"/></par>
            <par>
                After all components are selected and in placed, use a mouse to wire a connection between the blue and red dots.
                See to it that there is one red dot to any number of blue dots. In case of a three state outputs, this rule is deviated 
                to accomodate a connection of multiple red dots. The wire that is to be connected can either be vertical or 
                horizontal orientation. To add wire diagonally, press in "D" to engage in diagonal mode. After completing all connection, 
                missed wired in the circuit now is complete, and ready for simulation.
            </par>
            <par><image src="scr08.png"/></par>
            <par>
                Interaction with the circuit is possible when simulation is started. It is done by clicking on the play button 
                located in the toolbar. After starting the simulation, the wire color changes from light to dark gray depending 
                on the input state. A dark gray marks a logical '1'; and, a light gray indicates a logical '0'. In the figure above, 
                all wires have a '0' value.
            </par>
            <par><image src="scr09.png"/></par>
            <par>
                Once the simulation is active, the input is switch from either 0(low) or 1(high) by clicking on the input using the mouse.
                The circuit behaves as an Exclusive-OR (XOR) gate.
            </par>
            <par><image src="scr10.png"/></par>
            <par>
                Stop the simulation first before further processing the circuit. It is done with ease by clicking the pause button in the toolbar.
                TWhen you right click the input component, edit component dialog box which displays component's properties. Label 'A' can be defined as first input 
                using the dialog box.
            </par>
            <par><image src="scr11.png"/></par>
            <par>
                IN this way, labels for the remaaining inputs and ouputs can be configured. From the Menu bar, 
                select <e>Analysis</e> to determine the truth table of the current circuit. This is only possible 
                when all inputs and outputs are properly and correctly labeled.
            </par>
            <par><image src="scr12.png"/></par>
            <par>
                The truth table of the simulated circuit appears on a new window wherease the algebraic expressions are tabulated.
                In case of several expressions, a new window opens with all the possible logical expressions 
                generated from the current simulation.
            </par>
            <par><image src="scr13.png"/></par>
            <par>
                The table dialog box consist of a menu entry <e>K-Map</e> from its main menu. This allows to display the truth
                table in the form of a K-map.
            </par>
            <par><image src="scr14.png"/></par>
            <par>
                A drop-down list from the top of the dialog box allows the selection of desired K-map expressions.
                For example, display a result from a mutiple expressions. However, for XOR, there is only one minimal expression.
                Truth table can also be modified by clicking the K-map.
            </par>
        </subchapter>
        <subchapter name="Wires">
            <par>
                All components must be connected through a wire whrease it is not possible  to directly placed components d
                irectly to next each other.
            </par>
            <par>
                In addition, there is only a connections between the endpoint of a wire and a component.
                No connection is done when component pin is placed in between wires. Connection mmust always 
                terminate at the component pin. For tunnel component, there should have a connecting wire between the pin 
                and the tunnel component.
            </par>
            <par>
                The component needs to be selected using the rectangular selection tool in order to be moved,
                including the connecting wires in between components. For moving an component without the connecting wires, 
                select the component using mouse click.
            </par>
        </subchapter>
        <subchapter name="Hierarchical Design">
            <par>
                If a complex circuit is built up, this can quickly become very confusing. To keep track here,
                the different parts of a circuit can be stored in different files. This mechanism also makes it
                possible to use a subcircuit, which has been created once, several times in a further circuit.
                This approach also offers the advantage that the files can be stored independently of each other in a
                version control system and changes can be tracked.
            </par>
            <par><image src="scr20.png"/></par>
            <par>
                As an example, consider a 4-bit adder: First, we built a simple half-adder. This consists of an
                XOR gate and an AND gate. The sum of the two bits 'A' and 'B' is given to the outputs 'S' and 'C'.
                This circuit is stored in the file <e>halfAdder.dig</e>.
            </par>
            <par><image src="scr21.png"/></par>
            <par>
                From two half adders a full adder can now be built. To do this, create a new empty file and save the
                empty file as <e>fullAdder.dig</e> in the same folder as before the half adder. Then the
                half adder can be added to the new circuit via the <e>Components</e><arrow/><e>Custom</e> menu.
                The order of the pins at the package of the half-adder can be rearranged in the half adder in the
                menu <e>Edit</e><arrow/><e>Order inputs</e> or <e>Edit</e><arrow/><e>Order outputs</e>.
                The full adder adds the three bits 'A', 'B' and 'Ci' and gives the sum to the outputs 'S' and 'Co'.
            </par>
            <par><image src="scr22.png"/></par>
            <par>
                In order to check the correct function of the full adder, a test case should be added. In the test case,
                the truth table is stored, which should fulfill the circuit. In this way it can be automatically
                checked whether this is the case.
            </par>
            <par><image src="scr23.png"/></par>
            <par>
                The tests can be executed via the test case editor or the test button in the toolbar.
                The table cells highlighted in green indicate that the output of the circuit matches
                the truth table given in the test case.
            </par>
            <par><image src="scr24.png"/></par>
            <par>
                Now the full adders can be put together to form a so-called ripple-carry adder.
                In this case, the carry output of an addition is forwarded as a carry input to the addition of the
                next higher-order bit, just as it is usual in pencil-and-paper addition.
                This 4-bit adder should be tested for correct function. For this purpose a test case was inserted.
            </par>
            <par><image src="scr25.png"/></par>
            <par>
                This test case performs a 100% test, which is possible only with relatively simple circuits: all
                possible 512 input combinations are applied to the circuit, and it is checked whether the output
                of the circuit is correct.
                The first line lists the input and output signals. Below this, the input values to be applied and
                the output values to be checked are specified in a row, as in a truth table.
                In this example, however, 512 lines are required. Entering this would be a tedious and error-prone task.
                It is easier and more reliable to automatically generate the required lines.
                For this purpose, the variables <e>A</e> and <e>B</e> are each traversed
                from 0 to 15. The respective values of <e>A</e> and <e>B </e> are then assigned to inputs 'A[n]' and 'B[n]'.
                Then it is checked whether the circuit outputs the value <e>A+B</e>. Then it is checked again with
                the carry bit set, in which case <e>A+B+1</e> must result.
                The details of the test syntax are provided by the help dialog.
            </par>
            <par>
                If a circuit is embedded in an other ciruit, only the file name of the subcircuit is stored in a
                circuit, not the embedded circuit itself.
                The corresponding files of
                the embedded subcircuits must therefore be found in the file system at runtime of the simulation.
                In order to support the various work methods of the users as best as possible and still to avoid a
                complex administration of import paths, etc., a somewhat unusual import strategy is implemented.
            </par>
            <par>
                Only the file names of the embedded circuits are stored in a circuits file, not the full path.
                If a file needs to be opened, all subfolders are searched for a file of the corresponding name.
                If a suitable file is found, it is imported. This process only depends on the file name of the file to
                be read, not on its path. Correspondingly, an error message is generated if there are several files of
                the same name in different subfolders, since ambiguities then arise.
            </par>
            <par>
                A suitable project structure therefore looks as follows: The root circuit is located in a separate
                folder.
                All imported circuits must be in the same folder or subfolders. All circuits must have different names,
                so it must not happen that there are circuits of the same name in different folders.
            </par>
        </subchapter>
    </chapter>
    <chapter name="Simulation">
        <subchapter name="Propagation Delay">
            <par>
                During the simulation every logic gate has a propagation delay. Every component found in the library
                has the same propagation delay regardless of its complexity.
                The AND gate thus has the same propagation delay as the multiplier.
                The only exceptions are diodes, switches and splitters which are used to create data buses.
                These components have no propagation delay at all.
            </par>
            <par>
                If it's necessary to simulate a gate - e.g. the multiplier - with a longer propagation delay, a delay
                gate must be inserted in the circuit right behind the output of the multiplier.
            </par>
            <par>
                If a circuit is included in an other parent circuit, the included circuit keeps its timing behaviour.
                So if you include a complex circuit which has a large propagation delay because the input signals
                has to pass three gates until it reaches the output, this behaviour is conserved while including this
                circuit.
                There are no additional delays coming up by including a circuit. If not all outputs of a circuit have
                the same propagation delay this is also the case if it is included in a parent circuit.
                In general, including a circuit into an other circuit does not modify its timing behaviour at all. A
                included circuit behave in exact the same way as if all components had been inserted at the same circuit
                level.
            </par>
        </subchapter>
    </chapter>
    <chapter name="Circuit Analysis and Synthesis">
        <par>
            A circuit can be analyzed via the menu entry <e>Analysis</e>. A truth table is generated for purely
            combinatorial circuits. This truth table can be edited as desired.
            A new circuit can be generated from this truth table after editing.
        </par>
        <par>
            In addition to purely combinatorial circuits, it is also possible to analyze or generate sequential
            circuits.
            Instead of a simple truth table a so-called state transition table is created.
            Each flip-flop thereby appears on the input side and the output side of the state transition table.
            In this table, on the right-hand side, you can find the next state, which will
            occur after the next clock signal. This next state depends on the current state of the flip-flops as found
            at the left-hand side of the table.
            For an analysis to be possible, the flipflops must be named.
        </par>
        <par>
            The following naming convention applies: The following next state of a bit on the right side of the table
            is indicated by a descended small 'n+1'. The corresponding current state is indicated by an appended 'n'.
            If there is a state variable 'A', 'An' indicates the current state and 'An+1' indicates the next state.
            If, in the truth table on the left and right side, signals are present, which correspond to this pattern
            it is assumed that the table is a state transition table, and a sequential circuit is generated instead of
            a combinatorial circuit.
        </par>
        <par>
            It should be noted that the circuit to be analyzed may contain only purely combinatorial elements in
            addition to the built-in D and JK flipflops. If a flip-flop is e.g. made from Nor gates, this
            circuit is not recognized as a flip-flop and therefore it is not possible to analyse such a circuit.
        </par>
    </chapter>
    <chapter name="Hardware">
        <subchapter name="GAL16v8 and GAL22v10">
            <par>
                In the menu of the circuit generation in the truth table there are also functions to generate so-called
                JEDEC files. This is a special file format that describes the fuse map of a PLD.
                This JEDEC file can be written into a corresponding PLD using a special programmer.
                At the moment, circuits of the type <e>GAL16v8</e> and <e>GAL22v10</e> or fuse map compatible
                devices are supported.
            </par>
        </subchapter>
        <subchapter name="ATF150xAS">
            <par>
                The chips in the
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/cpld-atf15xx-family">
                    <e>ATF150x</e>
                </a>
                family are simple CPLDs with up to 128 macrocells. They are available in a
                PLCC package, which makes them suitable for laboratory exercises: If an IC is destroyed during exercises,
                it can simply be replaced. In addition, with the
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/tools/hardware/atdh1150usb">
                    <e>ATDH1150USB</e>
                </a>
                a easy to use low-cost programmer is available. This programmer is able to program the
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/cpld-atf15xx-family">
                    <e>ATF150x</e>
                </a>
                chips in system using a JTAG interface.
                A suitable evaluation board
                <a href="https://www.microchip.com/DevelopmentTools/ProductDetails.aspx?PartNO=ATF15XX-DK3-U">
                    (<e>ATF15XX-DK3-U</e>)
                </a>
                is also available.
                The software
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/tools/software/atmisp">
                    <e>ATMISP</e>
                </a>
                which is available on the ATMEL/Microchip website, is required for programming the chips.
            </par>
            <par>
                Unfortunately, the fuse map details are not public available so that no suitable fitter for this chip
                can be integrated in Digital, as it is possible with the <e>GAL16v8</e> and <e>GAL22v10</e> chips.
            </par>
            <par>
                Therefore, the fitters <e>fit150[x].exe</e> provided by ATMEL must be used. These programs create a
                <e>JEDEC</e> file from a suitable <e>TT2</e> file which can then be programmed to the chip. Digital
                starts the fitter automatically every time a <e>TT2</e> file is created. For this purpose, the path to the
                <e>fit150[n].exe</e> fitters must be specified in the settings.
                The created <e>JEDEC</e> file can then be opened and programmed directly with
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/tools/software/atmisp">
                    <e>ATMISP</e>
                </a>.
            </par>
            <par>
                For legal reasons the fitter <e>fit1502.exe</e> can not be distributed with Digital. However, it can be
                found in the folder <e>WinCupl\Fitters</e> after installing
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/tools/software/wincupl">
                    <e>WinCupl</e>
                </a>.
                <a href="https://www.microchip.com/design-centers/programmable-logic/spld-cpld/tools/software/wincupl">
                    <e>WinCupl</e>
                </a>
                is available on the ATMEL/Microchip website.
                On Linux systems, the fitters can also be executed by Digital if <e>wine</e> is installed.
            </par>
        </subchapter>
        <subchapter name="VHDL">
            <par>
                A circuit can be exported to VHDL. A file is generated which contains the complete description of the
                circuit. The generated VHDL code was tested with
                <a href="https://www.xilinx.com/products/design-tools/vivado.html">Xilinx Vivado</a>
                and the open source VHDL simulator <a href="http://ghdl.free.fr/">ghdl</a>.
            </par>
            <par>
                If a circuit contains test cases, the test data is used to generate a VHDL test bench. This can be used
                to check the correct function of the circuit in a VHDL simulation.
            </par>
            <par>
                Additional files which are needed by special boards can be created. At present only the
                <a href="https://reference.digilentinc.com/reference/programmable-logic/basys-3/start">BASYS3</a>
                board is supported.
                A constraints file is created, which contains the assignment of the pins. The description of the pins can
                be found in the BASYS3 data sheet, and must be entered as a pin number for the inputs and outputs.
            </par>
            <par>
                If the circuit clock frequency is low, a frequency divider is integrated into the VHDL code to divide
                the board clock accordingly.
                If the clock frequency selected in the circuit exceeds 37kHz, the MMCM unit of the
                Artix-7 is used for clock generation.
                This ensures that the FPGA resources provided for the clock distribution are used.
                This allows the included example processor to run at 20MHz and if you can do without the
                multiplier also 30HMz is possible.
            </par>
            <par>
                If a circuit is to run on a BASYS3 board, a new project can be created in Vivado.
                The generated VHDL file and the constraints file must be added to the project.
                Once the project has been created, the bitstream can be generated and the Hardware-Manager can be used
                to program a BASYS3 board.
            </par>
            <par>
                To create the required constraints file, the circuit must contain a text field with the text "Board:
                BASYS3".
            </par>
        </subchapter>
    </chapter>
    <chapter name="Frequently asked Questions">
        <faq>
            <question>How to move a wire?</question>
            <answer>Select on of the end points with the rectangular selection. The move this point using the mouse.
                You can also select a wire with CTRL + mouse button.
            </answer>
        </faq>
        <faq>
            <question>How to delete a wire?</question>
            <answer>Select on of the end points and press <e>DEL</e> or click on the trashcan.
                You can also select a wire with CTRL + mouse button.
            </answer>
        </faq>
        <faq>
            <question>How to move a component including all the connected wires?</question>
            <answer>Select the component with the rectangular selection. The selection must include the entire
                component.
                Then move the component including the wires using the mouse.
            </answer>
        </faq>
        <faq>
            <question>There is a component not connected to a wire, even though the pins are on the wire.</question>
            <answer>A pin is only connected to a wire if the wire has an endpoint at the pin.</answer>
        </faq>
        <faq>
            <question>If the names of the pins in a circuit are long, the names are no longer readable when
                the circuit is embedded. What can I do?</question>
            <answer>The width of the block can be increased using the menu item
                <e>Edit<arrow/>Edit circuit attributes</e>.</answer>
        </faq>
        <faq>
            <question>The pins in an embedded circuit have an unfavorable order. How can this be changed?</question>
            <answer>The sequence can be changed using the menu entry <e>Edit<arrow/>Order inputs</e> or
                <e>Edit<arrow/>Order outputs</e>.</answer>
        </faq>

        <faq>
            <question>When the simulation is started, a wire becomes gray. What does that mean?</question>
            <answer>The colors light green and dark green are used to represent high and low state.
                Gray means the wire is in high Z state.
            </answer>
        </faq>
        <faq>
            <question>I have a truth table. How to calculate the minimized boolean equations?</question>
            <answer>In the menu <e>Analysis</e> select the entry <e>Synthesise</e>. Then enter the truth table.
                At the bottom of the window you can find the matching boolean equation. If you enter more than one
                dependent variable, a new window opens in which all boolean equations are shown.
            </answer>
        </faq>
        <faq>
            <question>I have entered a truth table, but there are more then one boolean equation shown.
                Which of them is the correct one?
            </question>
            <answer>Minimizing a boolean equation can result in many equations, describing the same function.
                Digital shows all of them and they all create the same truth table.
                There may be differences according the don't cares in the truth table.
            </answer>
        </faq>
        <faq>
            <question>I have a truth table. How to create a circuit representing the truth table?</question>
            <answer>In the menu <e>Analysis</e> select the entry <e>Synthesise</e>. Then enter the truth table.
                You can edit the table using the <e>New</e> or <e>Add Columns</e> menus.
                In the menu <e>Create</e> you can create a circuit using the <e>Circuit</e> item.
            </answer>
        </faq>
        <faq>
            <question>How to edit a signals name in the truth table?</question>
            <answer>Right click on the name in the table header to edit the name.</answer>
        </faq>
        <faq>
            <question>I have a boolean equation. How to create a circuit?</question>
            <answer>In the menu <e>Analysis</e> select the entry <e>Expression</e>. Then enter the expression.
            </answer>
        </faq>
        <faq>
            <question>How to create a truth table from an boolean equation?</question>
            <answer>In the menu <e>Analysis</e> select the entry <e>Expression</e>. Then enter the expression.
                Then create a circuit and in the menu <e>Analysis</e> use the entry <e>Analysis</e> to create the truth
                table.
            </answer>
        </faq>
        <faq>
            <question>How to create a JEDEC file from a given circuit?</question>
            <answer>In the menu <e>Analysis</e> select the entry <e>Analysis</e>. Then in the menu <e>Create</e> of the
                new
                window choose the correct device in the sub menu <e>Device</e>.
            </answer>
        </faq>
        <faq>
            <question>When creating a JEDEC file: How to assign a pin number to a certain signal?</question>
            <answer>At the according inputs and outputs you can enter a pin number in the settings dialog of the pin.
            </answer>
        </faq>
        <faq>
            <question>I have created a JEDEC file. How to program it to a <e>GAL16v8</e> or <e>GAL22v10</e>?
            </question>
            <answer>To program such a chip a special programmer hardware is necessary.</answer>
        </faq>
    </chapter>
    <chapter name="Keyboard Shortcuts" newpage="true">
        <shortcuts>
            <shortcut key="Space">Starts or stops the simulation.</shortcut>
            <shortcut key="F7">Run to Break</shortcut>
            <shortcut key="F8">Execute test cases</shortcut>
            <shortcut key="C">A single clock step (Works only in a running simulation and only if there is a single
                clock component).
            </shortcut>
            <shortcut key="F9">Analysis of the circuit</shortcut>
            <shortcut key="CTRL-A">Select all.</shortcut>
            <shortcut key="CTRL-X">Cuts the selected components to the clipboard.</shortcut>
            <shortcut key="CTRL-C">Copys the selected components to the clipboard.</shortcut>
            <shortcut key="CTRL-V">Inserts the comonents from the clipboard.</shortcut>
            <shortcut key="CTRL-D">Duplicate the actual selection without modifing the clipboard.</shortcut>
            <shortcut key="R">While inserting this rotates the components.</shortcut>
            <shortcut key="L">Inserts the last inserted component again.</shortcut>
            <shortcut key="CTRL-N">New circuit.</shortcut>
            <shortcut key="CTRL-O">Open circuit.</shortcut>
            <shortcut key="CTRL-S">Save the circuit.</shortcut>
            <shortcut key="CTRL-Z">Undo last modification.</shortcut>
            <shortcut key="CTRL-Y">Redo the last undone modification.</shortcut>
            <shortcut key="P">Programs a diode or a FG-FET.</shortcut>
            <shortcut key="D">While drawing a wire switches to the diagonal mode.</shortcut>
            <shortcut key="F">While drawing a line flips the orientation.</shortcut>
            <shortcut key="S">Splits a single wire into two wires.</shortcut>
            <shortcut key="ESC">Abort the actual action.</shortcut>
            <shortcut key="Del">Removes the selected components.</shortcut>
            <shortcut key="Backspace">Removes the selected components.</shortcut>
            <shortcut key="+">Increases the number of inputs at the component the mouse points to.</shortcut>
            <shortcut key="-">Decreases the number of inputs at the component the mouse points to.</shortcut>
            <shortcut key="CTRL +">Zoom In</shortcut>
            <shortcut key="CTRL -">Zoom Out</shortcut>
            <shortcut key="F1">Fit to size</shortcut>
            <shortcut key="F5">Show or hide the components tree view</shortcut>
        </shortcuts>
    </chapter>
</root>
