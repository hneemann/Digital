/*
 * Copyright (c) 2018 Ivan Deras.
 * Use of this source code is governed by the GPL v3 license
 * that can be found in the LICENSE file.
 */
package de.neemann.digital.hdl.verilog2;

import de.neemann.digital.hdl.printer.CodePrinterStr;
import de.neemann.digital.core.extern.ProcessStarter;
import de.neemann.digital.hdl.printer.CodePrinter;
import de.neemann.digital.integration.ToBreakRunner;
import junit.framework.TestCase;

import java.io.File;
import java.nio.file.Files;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class VerilogGeneratorTest extends TestCase {

    public void testComb() throws Exception {
        ToBreakRunner br = new ToBreakRunner("dig/hdl/model2/comb.dig");
        CodePrinterStr out = new CodePrinterStr();
        new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());

        assertEquals("/*\n"
                + " * Generated by Digital. Don't modify this file!\n"
                + " * Any changes will be lost if this file is regenerated.\n"
                + " */\n"
                + "module DIG_D_FF_1bit\n"
                + "#(\n"
                    + "    parameter Default = 0\n"
                    + ")\n"
                    + "(\n"
                    + "   input D,\n"
                    + "   input C,\n"
                    + "   output Q,\n"
                    + "   output \\~Q\n"
                    + ");\n"
                    + "    reg state;\n"
                    + "\n"
                    + "    assign Q = state;\n"
                    + "    assign \\~Q = ~state;\n"
                    + "\n"
                    + "    always @ (posedge C) begin\n"
                    + "        state <= D;\n"
                    + "    end\n"
                    + "\n"
                    + "    initial begin\n"
                    + "        state = Default;\n"
                    + "    end\n"
                    + "endmodule\n"
                    + "\n"
                    + "\n"
                    + "module comb (\n"
                    + "  input A,\n"
                    + "  input B,\n"
                    + "  input C,\n"
                    + "  output X,\n"
                    + "  output Y,\n"
                    + "  output Z,\n"
                    + "  output Aident\n"
                    + ");\n"
                    + "  wire Y_temp;\n"
                    + "  wire s0;\n"
                    + "  wire Z_temp;\n"
                    + "  assign Y_temp = (B | ~ C);\n"
                    + "  assign Z_temp = ~ A;\n"
                    + "  assign s0 = ((A | C) & (Z_temp | C) & 1'b1 & ~ (B | C) & Y_temp);\n"
                    + "  DIG_D_FF_1bit #(\n"
                    + "    .Default(0)\n"
                    + "  )\n"
                    + "  DIG_D_FF_1bit_i0 (\n"
                    + "    .D( s0 ),\n"
                    + "    .C( 1'b1 ),\n"
                    + "    .Q( X )\n"
                    + "  );\n"
                    + "  assign Y = Y_temp;\n"
                    + "  assign Z = Z_temp;\n"
                    + "  assign Aident = A;\n"
                    + "endmodule\n", out.toString());
    }

    public void testSplitter3() throws Exception {
        ToBreakRunner br = new ToBreakRunner("dig/hdl/model2/splitter3.dig");
        CodePrinterStr out = new CodePrinterStr();
        new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());

        assertEquals("/*\n"
                + " * Generated by Digital. Don't modify this file!\n"
                + " * Any changes will be lost if this file is regenerated.\n"
                + " */\n"
                + "\n"
                + "module splitter3 (\n"
                    + "  input [3:0] A,\n"
                    + "  input [3:0] B,\n"
                    + "  output [3:0] S\n"
                    + ");\n"
                    + "  assign S[1:0] = (A[1:0] & B[1:0]);\n"
                    + "  assign S[3:2] = (A[3:2] | B[3:2]);\n"
                    + "endmodule\n", out.toString());
    }

    public void testSplitter2() throws Exception {
        ToBreakRunner br = new ToBreakRunner("dig/hdl/model2/splitter2.dig");
        CodePrinterStr out = new CodePrinterStr();
        new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());

        assertEquals("/*\n"
                + " * Generated by Digital. Don't modify this file!\n"
                + " * Any changes will be lost if this file is regenerated.\n"
                + " */\n"
                + "\n"
                + "module splitter2 (\n"
                    + "  input [1:0] A,\n"
                    + "  input [1:0] B,\n"
                    + "  output X,\n"
                    + "  output [2:0] Y\n"
                    + ");\n"
                    + "  wire [3:0] s0;\n"
                    + "  assign s0[1:0] = A;\n"
                    + "  assign s0[3:2] = B;\n"
                    + "  assign X = s0[0];\n"
                    + "  assign Y = s0[3:1];\n"
                    + "endmodule\n", out.toString());
    }

    public void testSplitter2I() throws Exception {
        ToBreakRunner br = new ToBreakRunner("dig/hdl/splitter2.dig");
        CodePrinterStr out = new CodePrinterStr();
        new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());

        assertEquals("/*\n"
                + " * Generated by Digital. Don't modify this file!\n"
                + " * Any changes will be lost if this file is regenerated.\n"
                + " */\n"
                + "\n"
                + "module splitter2 (\n"
                    + "  input [15:0] inst,\n"
                    + "  output [15:0] \\9SD \n"
                    + ");\n"
                    + "  wire s0;\n"
                    + "  assign s0 = inst[8];\n"
                    + "  assign \\9SD [7:0] = inst[7:0];\n"
                    + "  assign \\9SD [8] = s0;\n"
                + "  assign \\9SD [9] = s0;\n"
                + "  assign \\9SD [10] = s0;\n"
                + "  assign \\9SD [11] = s0;\n"
                + "  assign \\9SD [12] = s0;\n"
                + "  assign \\9SD [13] = s0;\n"
                + "  assign \\9SD [14] = s0;\n"
                + "  assign \\9SD [15] = s0;\n"
                + "endmodule\n", out.toString());
    }


    public void testSkip() throws Exception {
        ToBreakRunner br = new ToBreakRunner("dig/hdl_skip/skipOuter.dig");
        CodePrinterStr out = new CodePrinterStr();
        new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());

        assertEquals("/*\n" +
                " * Generated by Digital. Don't modify this file!\n" +
                " * Any changes will be lost if this file is regenerated.\n" +
                " */\n" +
                "\n" +
                "module skipOuter (\n" +
                "  input A,\n" +
                "  input B,\n" +
                "  output Y\n" +
                ");\n" +
                "  wire s0;\n" +
                "  skipInner skipInner_i0 (\n" +
                "    .i( B ),\n" +
                "    .o( s0 )\n" +
                "  );\n" +
                "  assign Y = (A & s0);\n" +
                "endmodule\n", out.toString());
    }

    public void testNames() throws Exception {
        ToBreakRunner br = new ToBreakRunner("dig/hdl_names/main.dig");
        CodePrinterStr out = new CodePrinterStr();
        new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());

        assertEquals("/*\n" +
                " * Generated by Digital. Don't modify this file!\n" +
                " * Any changes will be lost if this file is regenerated.\n" +
                " */\n" +
                "\n" +
                "module a_b (\n" +
                "  input A,\n" +
                "  input B,\n" +
                "  output Y\n" +
                ");\n" +
                "  assign Y = (A & B);\n" +
                "endmodule\n" +
                "\n" +
                "module main (\n" +
                "  input A,\n" +
                "  input B,\n" +
                "  output Y\n" +
                ");\n" +
                "  a_b a_b_i0 (\n" +
                "    .A( A ),\n" +
                "    .B( B ),\n" +
                "    .Y( Y )\n" +
                "  );\n" +
                "endmodule\n", out.toString());
    }

    public void testTestCaseNames() throws Exception {
        DateFormat f = new SimpleDateFormat("yy-MM-dd_HH-mm_ss");
        String time = f.format(new Date());

        ToBreakRunner br = new ToBreakRunner("dig/hdl_names/a-b.dig");
        File dir = Files.createTempDirectory("digital_verilog_testcase_" + time + "_").toFile();
        File srcFile = new File(dir, "a-b.dig");
        CodePrinter out = new CodePrinter(srcFile);
        VerilogGenerator generator = new VerilogGenerator(br.getLibrary(), out).export(br.getCircuit());
        ArrayList<File> testbenches = generator.getTestBenches();
        assertEquals(testbenches.size(), 1);

        File test_file = testbenches.get(0);
        assertEquals(test_file.getName(), "a-b_tb.v");

        assertEquals("//  A testbench for a-b_tb\n" +
                "`timescale 1us/1ns\n" +
                "\n" +
                "module \\a-b_tb ;\n" +
                "    reg A;\n" +
                "    reg B;\n" +
                "    wire Y;\n" +
                "\n" +
                "  \\a-b  \\a-b0  (\n" +
                "    .A(A),\n" +
                "    .B(B),\n" +
                "    .Y(Y)\n" +
                "  );\n" +
                "\n" +
                "    reg [2:0] patterns[0:3];\n" +
                "    integer i;\n" +
                "\n" +
                "    initial begin\n" +
                "      patterns[0] = 3'b0_0_0;\n" +
                "      patterns[1] = 3'b0_1_0;\n" +
                "      patterns[2] = 3'b1_0_0;\n" +
                "      patterns[3] = 3'b1_1_1;\n" +
                "\n" +
                "      for (i = 0; i < 4; i = i + 1)\n" +
                "      begin\n" +
                "        A = patterns[i][2];\n" +
                "        B = patterns[i][1];\n" +
                "        #10;\n" +
                "        if (patterns[i][0] !== 1'hx)\n" +
                "        begin\n" +
                "          if (Y !== patterns[i][0])\n" +
                "          begin\n" +
                "            $display(\"%d:Y: (assertion error). Expected %h, found %h\", i, patterns[i][0], Y);\n" +
                "            $finish;\n" +
                "          end\n" +
                "        end\n" +
                "      end\n" +
                "\n" +
                "      $display(\"All tests passed.\");\n" +
                "    end\n" +
                "    endmodule\n",
                new String(Files.readAllBytes(test_file.toPath())));

        ProcessStarter.removeFolder(dir);
    }
}